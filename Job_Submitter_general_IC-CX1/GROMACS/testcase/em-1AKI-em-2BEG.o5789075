<qsub_standard_output>
Sat  2 Jul 19:48:08 BST 2022
<qstat -f 5789075.pbs>
</qstat -f 5789075.pbs>
</qsub_standard_output>
--in 'em-1AKI.tpr' --
printed output filename em-1AKI.out
mpi command: mpiexec 
gromacs/2021.3-mpi: requires AVX2. Add avx2=true to #PBS resource selections

Loading gromacs/2021.3-mpi
  Loading requirement: gcc/9.3.0 mpi/intel-2019
creating temporary directory /rds/general/ephemeral/user/hz1420/ephemeral/em-1AKI_5789075
<script>
# Synchronise nodes

if [[ ! -z ${PBS_NODEFILE} ]]; then
    if [[ -e ${PBS_NODEFILE} ]]; then
        echo '${PBS_NODEFILE}' found: ${PBS_NODEFILE}
        cat ${PBS_NODEFILE}
        PCLIST=`awk '{if ($I != old){printf("%s ",$I);old=$I}}' ${PBS_NODEFILE}`
    else
        echo '${PBS_NODEFILE} not found'
        exit
    fi

    for PC in ${PCLIST[@]}; do
        ssh ${PC} "if [[ ! -d ${JOBTMPDIR} ]]; then mkdir -p ${JOBTMPDIR} ;fi; echo 'temporary directory on '${PC}"
    done
fi

# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF | tee -a ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.in
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable dir:      ${XDIR}
executable:          ${PEXE}
EOF

if [[ ! -z ${PBS_JOBID} ]]; then
    echo "<qstat -f ${PBS_JOBID}>"  | tee -a ${OUTDIR}/${OUTPUT}
    qstat -f ${PBS_JOBID}      2>&1 | tee -a ${OUTDIR}/${OUTPUT}
    echo "</qstat -f ${PBS_JOBID}>" | tee -a ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input file

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE}`
SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`

## Mandatory files: jobname.in etc

while [[ ! -z ${TMP_NAME} ]]; do

### Substitute variable flags

	if [[ ${SAVED_NAME_FLAG} == '[jobname]' ]]; then
		SAVED_NAME=${JOBNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')
	elif [[ ${SAVED_NAME_FLAG} == '[pre_job]' && ! -z ${REFNAME} ]]; then
		SAVED_NAME=${REFNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')
	fi

### Substitute variable flags
	
	if [[ ${TMP_NAME_FLAG} == '[jobname]' ]]; then
		TMP_NAME=${JOBNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
	elif [[ ${TMP_NAME_FLAG} == '[pre_job]' && ! -z ${REFNAME} ]]; then
		TMP_NAME=${REFNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
	fi

    if [[ -e ${INPDIR}/${SAVED_NAME} && -s ${INPDIR}/${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "Found input data: ${INPDIR}/${SAVED_NAME}" 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${SAVED_NAME} copied."

### Synchonise files on all nodes

        if [[ ! -z ${PCLIST} ]]; then
            for PC in ${PCLIST[@]}; do
                ssh ${PC} "cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}"
                echo "File synchonised on ${PC} : ${JOBTMPDIR}/${TMP_NAME}"
            done
        fi
    else
        echo "ERROR: Mandatory input ${INPDIR}/${SAVED_NAME} not found or empty."
        exit
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE}`
	SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
	TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`
done

## External files

LINE_EXT=`grep -nw 'FILE_EXT' ${SETFILE}`
LINE_EXT=`echo "scale=0;${LINE_EXT%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $1)}' ${SETFILE}`
SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
TMP_NAME=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $2)}' ${SETFILE}`
TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`

while [[ ! -z ${TMP_NAME} ]]; do

### Substitute variable flags

	if [[ ${SAVED_NAME_FLAG} == '[jobname]' ]]; then
		SAVED_NAME=${JOBNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')
	elif [[ ${SAVED_NAME_FLAG} == '[pre_job]' && ! -z ${REFNAME} ]]; then
		SAVED_NAME=${REFNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')
	fi

### Substitute variable flags
	
	if [[ ${TMP_NAME_FLAG} == '[jobname]' ]]; then
		TMP_NAME=${JOBNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
	elif [[ ${TMP_NAME_FLAG} == '[pre_job]' && ! -z ${REFNAME} ]]; then
		TMP_NAME=${REFNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
	fi

### Find files in home directory

    if [[ -e ${INPDIR}/${SAVED_NAME} && -s ${INPDIR}/${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "Found input data: ${INPDIR}/${SAVED_NAME}" 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${SAVED_NAME} copied as ${TMP_NAME}."

### Synchonise files on all nodes

        if [[ ! -z ${PCLIST} ]]; then
            for PC in ${PCLIST[@]}; do
                ssh ${PC} "cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}"
                echo "File synchonised on ${PC} : ${JOBTMPDIR}/${TMP_NAME}"
            done
        fi

### File not found

    else
        echo "The optional input data ${INPDIR}/${SAVED_NAME} not found or empty."
    fi

    LINE_EXT=`echo "scale=0;${LINE_EXT}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $1)}' ${SETFILE}`
    SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
    TMP_NAME=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $2)}' ${SETFILE}`
    TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`
done

echo "All files are synchonised." | tee -a ${OUTDIR}/${OUTPUT}

# Launch calculations

echo "" | tee -a ${OUTDIR}/${OUTPUT}
echo "Start the job" | tee -a ${OUTDIR}/${OUTPUT}
echo "Job name: ${JOBNAME} ID: ${PBS_JOBID}" | tee -a ${OUTDIR}/${OUTPUT}
echo "" | tee -a ${OUTDIR}/${OUTPUT}

cd ${JOBTMPDIR}
echo "Entering temporary directory ${JOBTMPDIR}"
echo "Job execution command to be used:"
echo "${EXECOMMAND}"
echo "Job started..."

${EXECOMMAND} 2>&1 | tee -a ${OUTDIR}/${OUTPUT}

exit
</script>
DATE START: Sat  2 Jul 19:50:19 BST 2022
${PBS_NODEFILE} found: /var/spool/PBS/aux/5789075.pbs
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
temporary directory on cx3-12-2.cx3.hpc.ic.ac.uk
output file: /rds/general/user/hz1420/home/gromacs-case/em-1AKI.out
date:                Sat  2 Jul 19:50:29 BST 2022
hostname:            cx3-12-2.cx3.hpc.ic.ac.uk
system:              Linux cx3-12-2.cx3.hpc.ic.ac.uk 4.18.0-348.20.1.el8_5.x86_64 #1 SMP Tue Mar 8 12:56:54 EST 2022 x86_64 x86_64 x86_64 GNU/Linux
user:                hz1420
input:               /rds/general/user/hz1420/home/gromacs-case/em-1AKI.in
output:              /rds/general/user/hz1420/home/gromacs-case/em-1AKI.out
executable script:   /rds/general/user/hz1420/home/etc/runGROMACS/run_exec
executable dir:      module load gromacs/2021.3-mpi
executable:          gmx_mpi
<qstat -f 5789075.pbs>
Connection timed out
qstat: cannot connect to server pbs (errno=110)
</qstat -f 5789075.pbs>
temporary directory: /rds/general/ephemeral/user/hz1420/ephemeral/em-1AKI_5789075
Found input data: /rds/general/user/hz1420/home/gromacs-case/em-1AKI.tpr
input em-1AKI.tpr copied.
File synchonised on cx3-12-2.cx3.hpc.ic.ac.uk : /rds/general/ephemeral/user/hz1420/ephemeral/em-1AKI_5789075/em-1AKI.tpr
All files are synchonised.

Start the job
Job name: em-1AKI ID: 5789075.pbs

Entering temporary directory /rds/general/ephemeral/user/hz1420/ephemeral/em-1AKI_5789075
Job execution command to be used:
mpiexec  gmx_mpi mdrun -s em-1AKI.tpr 
Job started...

# mpiexec: MPI Program startup


# mpiexec: Running in job 5789075.pbs at Sat  2 Jul 19:52:41 BST 2022
# mpiexec: Fabric configuration:
# mpiexec: node class CX3
# mpiexec: libfabric provider verbs
# mpiexec: libfabric inferface eth0
# mpiexec: MPI-IO configuration on / gpfs
# mpiexec: full path to program is /apps/gromacs/2021.3-mpi/bin/gmx_mpi
# mpiexec: program arguments are: mdrun -s em-1AKI.tpr
# mpiexec: 24 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: 24 ranks per node
# mpiexec: There are 256 cores/node. 24 will be used for this job
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: Node is shared. Disabling process pinning
# mpiexec: machinefile configured as:
cx3-12-2.cx3.hpc.ic.ac.uk:24
#
# mpiexec: Checking all nodes are ONLINE using ping:
# mpiexec: All nodes appear ONLINE
# mpiexec: Checking all nodes are ONLINE using ssh:
# cx3-12-2.cx3.hpc.ic.ac.uk : # mpiexec: Dynamic linking for /apps/gromacs/2021.3-mpi/bin/gmx_mpi:
	linux-vdso.so.1 (0x00007fff8b3d2000)
	libgromacs_mpi.so.6 => /apps/gromacs/2021.3-mpi/lib64/libgromacs_mpi.so.6 (0x00001543a996e000)
	libmpi.so.12 => /apps/mpi/intel/2019.6.166/lib/release/libmpi.so.12 (0x00001543a88d4000)
	librt.so.1 => /lib64/librt.so.1 (0x00001543a86cc000)
	libpthread.so.0 => /lib64/libpthread.so.0 (0x00001543a84ac000)
	libdl.so.2 => /lib64/libdl.so.2 (0x00001543a82a8000)
	libgomp.so.1 => /apps/gcc/9.3.0/lib64/libgomp.so.1 (0x00001543a8072000)
	libstdc++.so.6 => /apps/gcc/9.3.0/lib64/libstdc++.so.6 (0x00001543a7c98000)
	libm.so.6 => /lib64/libm.so.6 (0x00001543a7916000)
	libgcc_s.so.1 => /apps/gcc/9.3.0/lib64/libgcc_s.so.1 (0x00001543a76fe000)
	libc.so.6 => /lib64/libc.so.6 (0x00001543a7339000)
	libblas.so.3 => /lib64/libblas.so.3 (0x00001543a70e5000)
	liblapack.so.3 => /lib64/liblapack.so.3 (0x00001543a6844000)
	libfabric.so.1 => /apps/mpi/intel/2019.6.166/libfabric/lib/libfabric.so.1 (0x00001543a65ff000)
	/lib64/ld-linux-x86-64.so.2 (0x00001543aaf23000)
	libgfortran.so.5 => /apps/gcc/9.3.0/lib64/libgfortran.so.5 (0x00001543a6171000)
	libquadmath.so.0 => /apps/gcc/9.3.0/lib/../lib64/libquadmath.so.0 (0x00001543a5f2b000)
# mpiexec: launch started at Sat  2 Jul 19:52:42 BST 2022
# mpiexec: launching program...
# mpiexec: /apps/gromacs/2021.3-mpi/bin/gmx_mpi mdrun -s em-1AKI.tpr
# mpiexec: PROGRAM OUTPUT FOLLOWS
(cx3-12-2.cx3.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)

                 :-) GROMACS - gmx mdrun, 2021.3-UNCHECKED (-:

                            GROMACS is written by:
     Andrey Alekseenko              Emile Apol              Rossen Apostolov     
         Paul Bauer           Herman J.C. Berendsen           Par Bjelkmar       
       Christian Blau           Viacheslav Bolnykh             Kevin Boyd        
     Aldert van Buuren           Rudi van Drunen             Anton Feenstra      
    Gilles Gouaillardet             Alan Gray               Gerrit Groenhof      
       Anca Hamuraru            Vincent Hindriksen          M. Eric Irrgang      
      Aleksei Iupinov           Christoph Junghans             Joe Jordan        
    Dimitrios Karkoulis            Peter Kasson                Jiri Kraus        
      Carsten Kutzner              Per Larsson              Justin A. Lemkul     
       Viveca Lindahl            Magnus Lundborg             Erik Marklund       
        Pascal Merz             Pieter Meulenhoff            Teemu Murtola       
        Szilard Pall               Sander Pronk              Roland Schulz       
       Michael Shirts            Alexey Shvetsov             Alfons Sijbers      
       Peter Tieleman              Jon Vincent              Teemu Virolainen     
     Christian Wennberg            Maarten Wolf              Artem Zhmurov       
                           and the project leaders:
        Mark Abraham, Berk Hess, Erik Lindahl, and David van der Spoel

Copyright (c) 1991-2000, University of Groningen, The Netherlands.
Copyright (c) 2001-2019, The GROMACS development team at
Uppsala University, Stockholm University and
the Royal Institute of Technology, Sweden.
check out http://www.gromacs.org for more information.

GROMACS is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License
as published by the Free Software Foundation; either version 2.1
of the License, or (at your option) any later version.

GROMACS:      gmx mdrun, version 2021.3-UNCHECKED
Executable:   /apps/gromacs/2021.3-mpi/bin/gmx_mpi
Data prefix:  /apps/gromacs/2021.3-mpi
Working dir:  /rds/general/ephemeral/user/hz1420/ephemeral/em-1AKI_5789075
Command line:
  gmx_mpi mdrun -s em-1AKI.tpr

Compiled SIMD: AVX_256, but for this host/run AVX2_256 might be better (see
log).
Reading file em-1AKI.tpr, VERSION 2021.3-UNCHECKED (single precision)
Using 24 MPI processes
Using 1 OpenMP thread per MPI process


NOTE: The number of threads is not equal to the number of (logical) cores
      and the -pin option is set to auto: will not pin threads to cores.
      This can lead to significant performance degradation.
      Consider using -pin on (and -pinoffset in case you run multiple jobs).

Steepest Descents:
   Tolerance (Fmax)   =  1.00000e+03
   Number of steps    =        50000

writing lowest energy coordinates.

Steepest Descents converged to Fmax < 1000 in 850 steps
Potential Energy  = -5.9025775e+05
Maximum force     =  8.7412653e+02 on atom 736
Norm of force     =  2.0586800e+01

GROMACS reminds you: "Do You Have Sex Maniacs or Schizophrenics or Astrophysicists in Your Family?" (Gogol Bordello)

# mpiexec: finished at Sat  2 Jul 19:53:00 BST 2022
--in 'em-1AKI.tpr' --
Start post-processing...

List of saved files
TEMPORARY          SAVED
md.log             em-1AKI.log       313028   Jul 2 19:53
output md.log copied as em-1AKI.log.
traj.trr           em-1AKI.trr       406632   Jul 2 19:53
output traj.trr copied as em-1AKI.trr.
confout.gro        em-1AKI.gro       1524475  Jul 2 19:53
output confout.gro copied as em-1AKI.gro.
 
Disk usage:
<df -h .>
Filesystem      Size  Used Avail Use% Mounted on
rds              14P   11P  3.3P  77% /rds
</df -h .>
By folders:
<du -m .>
18	/rds/general/ephemeral/user/hz1420/ephemeral/em-1AKI_5789075
</du -m .>
Detailed file list:
<ls -l .>
total 17664
-rw-------. 1 hz1420 hpc-nmh 1524475 Jul  2 19:53 confout.gro
-rw-------. 1 hz1420 hpc-nmh 1267468 Jul  2 19:52 em-1AKI.tpr
-rw-------. 1 hz1420 hpc-nmh  132652 Jul  2 19:53 ener.edr
-rw-------. 1 hz1420 hpc-nmh    5801 Jul  2 19:50 Job_script
-rw-------. 1 hz1420 hpc-nmh  313028 Jul  2 19:53 md.log
-rw-------. 1 hz1420 hpc-nmh  406632 Jul  2 19:53 traj.trr
</ls -l .>
cx3-12-2.cx3.hpc.ic.ac.uk
<checkfile0>
#!/bin/bash
JOBNAME=em-1AKI
OUTDIR=/rds/general/user/hz1420/home/gromacs-case
OUTPUT=em-1AKI.out
JOBTMPDIR=/rds/general/ephemeral/user/hz1420/ephemeral/em-1AKI_5789075
cd  /rds/general/ephemeral/user/hz1420/ephemeral/em-1AKI_5789075
# Remove external files

if [[ ! -z ${REFNAME} ]]; then
    rm -r ${REFNAME}.*
fi

# Read POST_CALC list

LINE_POSTCALC=`grep -nw 'POST_CALC' ${SETFILE}`
LINE_POSTCALC=`echo "scale=0;${LINE_POSTCALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $1)}' ${SETFILE}`
SAVED_NAME_FLAG=`echo ${SAVED_NAME} | cut -c 1-9`
TMP_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $2)}' ${SETFILE}`
TMP_NAME_FLAG=`echo ${TMP_NAME} | cut -c 1-9`

while [[ ! -z ${TMP_NAME} ]]; do

### Substitute variable flags

    if [[ ${SAVED_NAME_FLAG} == '[jobname]' ]]; then
        SAVED_NAME=${JOBNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')

### If SAVED_NAME begins with '*', keep the original name

	elif [[ $(echo "${SAVED_NAME_FLAG}" | cut -c 1) == '*' ]]; then
		SAVED_NAME=''
    fi

### Substitute variable flags

    if [[ ${TMP_NAME_FLAG} == '[jobname]' ]]; then
        TMP_NAME=${JOBNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
    fi

## List files, to get all files with '*' in 'TMP_NAME' settings

    filelist=`find ${JOBTMPDIR} -name "${TMP_NAME}"`
    filelist=(${filelist//${JOBTMPDIR}\//})

### Make subdir for files stored in sub-folders 

    if [[ ${SAVED_NAME: -1} == '/' && ${#filelist[@]} -ge 1 ]]; then
        mkdir "${OUTDIR}/${SAVED_NAME}"
    fi

    for file in ${filelist[@]}; do

### Make sure the file is not empty

        if [[ ! -s ${JOBTMPDIR}/${file} ]]; then
            continue
        fi

        echo "${file} ${SAVED_NAME}" | awk '{printf("%-18s %-18s"),$1,$2}' 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        ls -l ${file} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}' 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        cp ${JOBTMPDIR}/${file} ${OUTDIR}/${SAVED_NAME}

### Normal files

        if [[ ${SAVED_NAME: -1} != '/' ]]; then
            echo "output ${file} copied as ${SAVED_NAME}."

### Files stored in sub-folders

        else
            echo "output ${file} copied into ${SAVED_NAME}."
        fi
    done

    LINE_POSTCALC=`echo "scale=0;${LINE_POSTCALC%%:*}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $1)}' ${SETFILE}`
    SAVED_NAME_FLAG=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $1)}' ${SETFILE} | cut -c 1-9`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $2)}' ${SETFILE}`
    TMP_NAME_FLAG=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $2)}' ${SETFILE} | cut -c 1-9`
done

# Calculation summary

echo " "                | tee -a ${OUTDIR}/${OUTPUT}
echo "Disk usage:"      | tee -a ${OUTDIR}/${OUTPUT}
echo "<df -h .>"        | tee -a ${OUTDIR}/${OUTPUT}
df -h ${JOBTMPDIR} 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
echo "</df -h .>"       | tee -a ${OUTDIR}/${OUTPUT}
echo "By folders:"      | tee -a ${OUTDIR}/${OUTPUT}
echo "<du -m .>"        | tee -a ${OUTDIR}/${OUTPUT}
du -m ${JOBTMPDIR} 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
echo "</du -m .>"       | tee -a ${OUTDIR}/${OUTPUT}
echo "Detailed file list:"
echo "<ls -l .>"
ls -l ${JOBTMPDIR} 2>&1
echo "</ls -l .>"
</checkfile0>
--in 'em-2BEG.tpr' --
printed output filename em-2BEG.out
mpi command: mpiexec 
gromacs/2021.3-mpi: requires AVX2. Add avx2=true to #PBS resource selections

Loading gromacs/2021.3-mpi
  Loading requirement: gcc/9.3.0 mpi/intel-2019
creating temporary directory /rds/general/ephemeral/user/hz1420/ephemeral/em-2BEG_5789075
<script>
# Synchronise nodes

if [[ ! -z ${PBS_NODEFILE} ]]; then
    if [[ -e ${PBS_NODEFILE} ]]; then
        echo '${PBS_NODEFILE}' found: ${PBS_NODEFILE}
        cat ${PBS_NODEFILE}
        PCLIST=`awk '{if ($I != old){printf("%s ",$I);old=$I}}' ${PBS_NODEFILE}`
    else
        echo '${PBS_NODEFILE} not found'
        exit
    fi

    for PC in ${PCLIST[@]}; do
        ssh ${PC} "if [[ ! -d ${JOBTMPDIR} ]]; then mkdir -p ${JOBTMPDIR} ;fi; echo 'temporary directory on '${PC}"
    done
fi

# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF | tee -a ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.in
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable dir:      ${XDIR}
executable:          ${PEXE}
EOF

if [[ ! -z ${PBS_JOBID} ]]; then
    echo "<qstat -f ${PBS_JOBID}>"  | tee -a ${OUTDIR}/${OUTPUT}
    qstat -f ${PBS_JOBID}      2>&1 | tee -a ${OUTDIR}/${OUTPUT}
    echo "</qstat -f ${PBS_JOBID}>" | tee -a ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input file

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE}`
SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`

## Mandatory files: jobname.in etc

while [[ ! -z ${TMP_NAME} ]]; do

### Substitute variable flags

	if [[ ${SAVED_NAME_FLAG} == '[jobname]' ]]; then
		SAVED_NAME=${JOBNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')
	elif [[ ${SAVED_NAME_FLAG} == '[pre_job]' && ! -z ${REFNAME} ]]; then
		SAVED_NAME=${REFNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')
	fi

### Substitute variable flags
	
	if [[ ${TMP_NAME_FLAG} == '[jobname]' ]]; then
		TMP_NAME=${JOBNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
	elif [[ ${TMP_NAME_FLAG} == '[pre_job]' && ! -z ${REFNAME} ]]; then
		TMP_NAME=${REFNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
	fi

    if [[ -e ${INPDIR}/${SAVED_NAME} && -s ${INPDIR}/${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "Found input data: ${INPDIR}/${SAVED_NAME}" 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${SAVED_NAME} copied."

### Synchonise files on all nodes

        if [[ ! -z ${PCLIST} ]]; then
            for PC in ${PCLIST[@]}; do
                ssh ${PC} "cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}"
                echo "File synchonised on ${PC} : ${JOBTMPDIR}/${TMP_NAME}"
            done
        fi
    else
        echo "ERROR: Mandatory input ${INPDIR}/${SAVED_NAME} not found or empty."
        exit
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE}`
	SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
	TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`
done

## External files

LINE_EXT=`grep -nw 'FILE_EXT' ${SETFILE}`
LINE_EXT=`echo "scale=0;${LINE_EXT%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $1)}' ${SETFILE}`
SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
TMP_NAME=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $2)}' ${SETFILE}`
TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`

while [[ ! -z ${TMP_NAME} ]]; do

### Substitute variable flags

	if [[ ${SAVED_NAME_FLAG} == '[jobname]' ]]; then
		SAVED_NAME=${JOBNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')
	elif [[ ${SAVED_NAME_FLAG} == '[pre_job]' && ! -z ${REFNAME} ]]; then
		SAVED_NAME=${REFNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')
	fi

### Substitute variable flags
	
	if [[ ${TMP_NAME_FLAG} == '[jobname]' ]]; then
		TMP_NAME=${JOBNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
	elif [[ ${TMP_NAME_FLAG} == '[pre_job]' && ! -z ${REFNAME} ]]; then
		TMP_NAME=${REFNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
	fi

### Find files in home directory

    if [[ -e ${INPDIR}/${SAVED_NAME} && -s ${INPDIR}/${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "Found input data: ${INPDIR}/${SAVED_NAME}" 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${SAVED_NAME} copied as ${TMP_NAME}."

### Synchonise files on all nodes

        if [[ ! -z ${PCLIST} ]]; then
            for PC in ${PCLIST[@]}; do
                ssh ${PC} "cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}"
                echo "File synchonised on ${PC} : ${JOBTMPDIR}/${TMP_NAME}"
            done
        fi

### File not found

    else
        echo "The optional input data ${INPDIR}/${SAVED_NAME} not found or empty."
    fi

    LINE_EXT=`echo "scale=0;${LINE_EXT}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $1)}' ${SETFILE}`
    SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
    TMP_NAME=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $2)}' ${SETFILE}`
    TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`
done

echo "All files are synchonised." | tee -a ${OUTDIR}/${OUTPUT}

# Launch calculations

echo "" | tee -a ${OUTDIR}/${OUTPUT}
echo "Start the job" | tee -a ${OUTDIR}/${OUTPUT}
echo "Job name: ${JOBNAME} ID: ${PBS_JOBID}" | tee -a ${OUTDIR}/${OUTPUT}
echo "" | tee -a ${OUTDIR}/${OUTPUT}

cd ${JOBTMPDIR}
echo "Entering temporary directory ${JOBTMPDIR}"
echo "Job execution command to be used:"
echo "${EXECOMMAND}"
echo "Job started..."

${EXECOMMAND} 2>&1 | tee -a ${OUTDIR}/${OUTPUT}

exit
</script>
DATE START: Sat  2 Jul 19:53:00 BST 2022
${PBS_NODEFILE} found: /var/spool/PBS/aux/5789075.pbs
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
cx3-12-2.cx3.hpc.ic.ac.uk
temporary directory on cx3-12-2.cx3.hpc.ic.ac.uk
output file: /rds/general/user/hz1420/home/gromacs-case/em-2BEG.out
date:                Sat  2 Jul 19:53:02 BST 2022
hostname:            cx3-12-2.cx3.hpc.ic.ac.uk
system:              Linux cx3-12-2.cx3.hpc.ic.ac.uk 4.18.0-348.20.1.el8_5.x86_64 #1 SMP Tue Mar 8 12:56:54 EST 2022 x86_64 x86_64 x86_64 GNU/Linux
user:                hz1420
input:               /rds/general/user/hz1420/home/gromacs-case/em-2BEG.in
output:              /rds/general/user/hz1420/home/gromacs-case/em-2BEG.out
executable script:   /rds/general/user/hz1420/home/etc/runGROMACS/run_exec
executable dir:      module load gromacs/2021.3-mpi
executable:          gmx_mpi
<qstat -f 5789075.pbs>
Connection timed out
qstat: cannot connect to server pbs (errno=110)
</qstat -f 5789075.pbs>
temporary directory: /rds/general/ephemeral/user/hz1420/ephemeral/em-2BEG_5789075
Found input data: /rds/general/user/hz1420/home/gromacs-case/em-2BEG.tpr
input em-2BEG.tpr copied.
File synchonised on cx3-12-2.cx3.hpc.ic.ac.uk : /rds/general/ephemeral/user/hz1420/ephemeral/em-2BEG_5789075/em-2BEG.tpr
All files are synchonised.

Start the job
Job name: em-2BEG ID: 5789075.pbs

Entering temporary directory /rds/general/ephemeral/user/hz1420/ephemeral/em-2BEG_5789075
Job execution command to be used:
mpiexec  gmx_mpi mdrun -s em-2BEG.tpr 
Job started...

# mpiexec: MPI Program startup


# mpiexec: Running in job 5789075.pbs at Sat  2 Jul 19:55:17 BST 2022
# mpiexec: Fabric configuration:
# mpiexec: node class CX3
# mpiexec: libfabric provider verbs
# mpiexec: libfabric inferface eth0
# mpiexec: MPI-IO configuration on / gpfs
# mpiexec: full path to program is /apps/gromacs/2021.3-mpi/bin/gmx_mpi
# mpiexec: program arguments are: mdrun -s em-2BEG.tpr
# mpiexec: 24 ranks allocated via PBS select
# mpiexec: 1 OpenMP threads / rank allocated by PBS select
# mpiexec: 24 ranks per node
# mpiexec: There are 256 cores/node. 24 will be used for this job
# mpiexec: Job has shared use of the allocated nodes. Disabling process-pinning
# mpiexec: Node is shared. Disabling process pinning
# mpiexec: machinefile configured as:
cx3-12-2.cx3.hpc.ic.ac.uk:24
#
# mpiexec: Checking all nodes are ONLINE using ping:
# mpiexec: All nodes appear ONLINE
# mpiexec: Checking all nodes are ONLINE using ssh:
# cx3-12-2.cx3.hpc.ic.ac.uk : # mpiexec: Dynamic linking for /apps/gromacs/2021.3-mpi/bin/gmx_mpi:
	linux-vdso.so.1 (0x00001509c94bd000)
	libgromacs_mpi.so.6 => /apps/gromacs/2021.3-mpi/lib64/libgromacs_mpi.so.6 (0x00001509c7cde000)
	libmpi.so.12 => /apps/mpi/intel/2019.6.166/lib/release/libmpi.so.12 (0x00001509c6c44000)
	librt.so.1 => /lib64/librt.so.1 (0x00001509c6a3c000)
	libpthread.so.0 => /lib64/libpthread.so.0 (0x00001509c681c000)
	libdl.so.2 => /lib64/libdl.so.2 (0x00001509c6618000)
	libgomp.so.1 => /apps/gcc/9.3.0/lib64/libgomp.so.1 (0x00001509c63e2000)
	libstdc++.so.6 => /apps/gcc/9.3.0/lib64/libstdc++.so.6 (0x00001509c6008000)
	libm.so.6 => /lib64/libm.so.6 (0x00001509c5c86000)
	libgcc_s.so.1 => /apps/gcc/9.3.0/lib64/libgcc_s.so.1 (0x00001509c5a6e000)
	libc.so.6 => /lib64/libc.so.6 (0x00001509c56a9000)
	libblas.so.3 => /lib64/libblas.so.3 (0x00001509c5455000)
	liblapack.so.3 => /lib64/liblapack.so.3 (0x00001509c4bb4000)
	libfabric.so.1 => /apps/mpi/intel/2019.6.166/libfabric/lib/libfabric.so.1 (0x00001509c496f000)
	/lib64/ld-linux-x86-64.so.2 (0x00001509c9293000)
	libgfortran.so.5 => /apps/gcc/9.3.0/lib64/libgfortran.so.5 (0x00001509c44e1000)
	libquadmath.so.0 => /apps/gcc/9.3.0/lib/../lib64/libquadmath.so.0 (0x00001509c429b000)
# mpiexec: launch started at Sat  2 Jul 19:55:17 BST 2022
# mpiexec: launching program...
# mpiexec: /apps/gromacs/2021.3-mpi/bin/gmx_mpi mdrun -s em-2BEG.tpr
# mpiexec: PROGRAM OUTPUT FOLLOWS
(cx3-12-2.cx3.hpc.ic.ac.uk:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)

                 :-) GROMACS - gmx mdrun, 2021.3-UNCHECKED (-:

                            GROMACS is written by:
     Andrey Alekseenko              Emile Apol              Rossen Apostolov     
         Paul Bauer           Herman J.C. Berendsen           Par Bjelkmar       
       Christian Blau           Viacheslav Bolnykh             Kevin Boyd        
     Aldert van Buuren           Rudi van Drunen             Anton Feenstra      
    Gilles Gouaillardet             Alan Gray               Gerrit Groenhof      
       Anca Hamuraru            Vincent Hindriksen          M. Eric Irrgang      
      Aleksei Iupinov           Christoph Junghans             Joe Jordan        
    Dimitrios Karkoulis            Peter Kasson                Jiri Kraus        
      Carsten Kutzner              Per Larsson              Justin A. Lemkul     
       Viveca Lindahl            Magnus Lundborg             Erik Marklund       
        Pascal Merz             Pieter Meulenhoff            Teemu Murtola       
        Szilard Pall               Sander Pronk              Roland Schulz       
       Michael Shirts            Alexey Shvetsov             Alfons Sijbers      
       Peter Tieleman              Jon Vincent              Teemu Virolainen     
     Christian Wennberg            Maarten Wolf              Artem Zhmurov       
                           and the project leaders:
        Mark Abraham, Berk Hess, Erik Lindahl, and David van der Spoel

Copyright (c) 1991-2000, University of Groningen, The Netherlands.
Copyright (c) 2001-2019, The GROMACS development team at
Uppsala University, Stockholm University and
the Royal Institute of Technology, Sweden.
check out http://www.gromacs.org for more information.

GROMACS is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License
as published by the Free Software Foundation; either version 2.1
of the License, or (at your option) any later version.

GROMACS:      gmx mdrun, version 2021.3-UNCHECKED
Executable:   /apps/gromacs/2021.3-mpi/bin/gmx_mpi
Data prefix:  /apps/gromacs/2021.3-mpi
Working dir:  /rds/general/ephemeral/user/hz1420/ephemeral/em-2BEG_5789075
Command line:
  gmx_mpi mdrun -s em-2BEG.tpr

Compiled SIMD: AVX_256, but for this host/run AVX2_256 might be better (see
log).
Reading file em-2BEG.tpr, VERSION 2021.3-UNCHECKED (single precision)
Using 24 MPI processes
Using 1 OpenMP thread per MPI process


NOTE: The number of threads is not equal to the number of (logical) cores
      and the -pin option is set to auto: will not pin threads to cores.
      This can lead to significant performance degradation.
      Consider using -pin on (and -pinoffset in case you run multiple jobs).

Steepest Descents:
   Tolerance (Fmax)   =  1.00000e+03
   Number of steps    =        50000

writing lowest energy coordinates.

Steepest Descents converged to Fmax < 1000 in 327 steps
Potential Energy  = -5.2535081e+05
Maximum force     =  9.0128442e+02 on atom 790
Norm of force     =  4.0150538e+01

GROMACS reminds you: "If you want to save your child from polio, you can pray or you can inoculate... choose science." (Carl Sagan)

# mpiexec: finished at Sat  2 Jul 19:55:26 BST 2022
--in 'em-2BEG.tpr' --
Start post-processing...

List of saved files
TEMPORARY          SAVED
md.log             em-2BEG.log       131866   Jul 2 19:55
output md.log copied as em-2BEG.log.
traj.trr           em-2BEG.trr       398604   Jul 2 19:55
output traj.trr copied as em-2BEG.trr.
confout.gro        em-2BEG.gro       1494429  Jul 2 19:55
output confout.gro copied as em-2BEG.gro.
 
Disk usage:
<df -h .>
Filesystem      Size  Used Avail Use% Mounted on
rds              14P   11P  3.3P  77% /rds
</df -h .>
By folders:
<du -m .>
2	/rds/general/ephemeral/user/hz1420/ephemeral/em-2BEG_5789075
</du -m .>
Detailed file list:
<ls -l .>
total 1024
-rw-------. 1 hz1420 hpc-nmh 1494429 Jul  2 19:55 confout.gro
-rw-------. 1 hz1420 hpc-nmh 1003244 Jul  2 19:55 em-2BEG.tpr
-rw-------. 1 hz1420 hpc-nmh   51512 Jul  2 19:55 ener.edr
-rw-------. 1 hz1420 hpc-nmh    5801 Jul  2 19:53 Job_script
-rw-------. 1 hz1420 hpc-nmh  131866 Jul  2 19:55 md.log
-rw-------. 1 hz1420 hpc-nmh  398604 Jul  2 19:55 traj.trr
</ls -l .>
cx3-12-2.cx3.hpc.ic.ac.uk
<checkfile0>
#!/bin/bash
JOBNAME=em-2BEG
OUTDIR=/rds/general/user/hz1420/home/gromacs-case
OUTPUT=em-2BEG.out
JOBTMPDIR=/rds/general/ephemeral/user/hz1420/ephemeral/em-2BEG_5789075
cd  /rds/general/ephemeral/user/hz1420/ephemeral/em-2BEG_5789075
# Remove external files

if [[ ! -z ${REFNAME} ]]; then
    rm -r ${REFNAME}.*
fi

# Read POST_CALC list

LINE_POSTCALC=`grep -nw 'POST_CALC' ${SETFILE}`
LINE_POSTCALC=`echo "scale=0;${LINE_POSTCALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $1)}' ${SETFILE}`
SAVED_NAME_FLAG=`echo ${SAVED_NAME} | cut -c 1-9`
TMP_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $2)}' ${SETFILE}`
TMP_NAME_FLAG=`echo ${TMP_NAME} | cut -c 1-9`

while [[ ! -z ${TMP_NAME} ]]; do

### Substitute variable flags

    if [[ ${SAVED_NAME_FLAG} == '[jobname]' ]]; then
        SAVED_NAME=${JOBNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')

### If SAVED_NAME begins with '*', keep the original name

	elif [[ $(echo "${SAVED_NAME_FLAG}" | cut -c 1) == '*' ]]; then
		SAVED_NAME=''
    fi

### Substitute variable flags

    if [[ ${TMP_NAME_FLAG} == '[jobname]' ]]; then
        TMP_NAME=${JOBNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
    fi

## List files, to get all files with '*' in 'TMP_NAME' settings

    filelist=`find ${JOBTMPDIR} -name "${TMP_NAME}"`
    filelist=(${filelist//${JOBTMPDIR}\//})

### Make subdir for files stored in sub-folders 

    if [[ ${SAVED_NAME: -1} == '/' && ${#filelist[@]} -ge 1 ]]; then
        mkdir "${OUTDIR}/${SAVED_NAME}"
    fi

    for file in ${filelist[@]}; do

### Make sure the file is not empty

        if [[ ! -s ${JOBTMPDIR}/${file} ]]; then
            continue
        fi

        echo "${file} ${SAVED_NAME}" | awk '{printf("%-18s %-18s"),$1,$2}' 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        ls -l ${file} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}' 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        cp ${JOBTMPDIR}/${file} ${OUTDIR}/${SAVED_NAME}

### Normal files

        if [[ ${SAVED_NAME: -1} != '/' ]]; then
            echo "output ${file} copied as ${SAVED_NAME}."

### Files stored in sub-folders

        else
            echo "output ${file} copied into ${SAVED_NAME}."
        fi
    done

    LINE_POSTCALC=`echo "scale=0;${LINE_POSTCALC%%:*}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $1)}' ${SETFILE}`
    SAVED_NAME_FLAG=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $1)}' ${SETFILE} | cut -c 1-9`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $2)}' ${SETFILE}`
    TMP_NAME_FLAG=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $2)}' ${SETFILE} | cut -c 1-9`
done

# Calculation summary

echo " "                | tee -a ${OUTDIR}/${OUTPUT}
echo "Disk usage:"      | tee -a ${OUTDIR}/${OUTPUT}
echo "<df -h .>"        | tee -a ${OUTDIR}/${OUTPUT}
df -h ${JOBTMPDIR} 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
echo "</df -h .>"       | tee -a ${OUTDIR}/${OUTPUT}
echo "By folders:"      | tee -a ${OUTDIR}/${OUTPUT}
echo "<du -m .>"        | tee -a ${OUTDIR}/${OUTPUT}
du -m ${JOBTMPDIR} 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
echo "</du -m .>"       | tee -a ${OUTDIR}/${OUTPUT}
echo "Detailed file list:"
echo "<ls -l .>"
ls -l ${JOBTMPDIR} 2>&1
echo "</ls -l .>"
</checkfile0>
