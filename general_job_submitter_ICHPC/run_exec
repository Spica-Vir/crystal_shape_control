#!/bin/bash

# get inputs in command line style

function get_input_ {

    ## Useful variables: 
    ## JOBFILE: Full name of the main input file
    ## JOBNAME: Name without extension
    ## REFNAME: 
    ## OPTIONS: other command-line options of the executable

    param_list=$(getopt -a -l in:,ref: -n "$0" -- ${in_var} 2> /dev/null) 
    echo ${param_list}

    eval set -- "${param_list}"
    OPTIONS=""
    REFNAME=""
    while [[ true ]]; do
        case $1 in
        --in ) 
            shift; JOBFILE=$1; JOBNAME=${JOBFILE%%.*} ;;
        --ref )
            shift; REFNAME=${1%%.*} ;;
        -- ) 
            shift;
            while [[ ! -z $1 ]]; do
                OPTIONS=`echo "${OPTIONS} $(echo $1)"`;
                shift;
            done; 
            break;;
        * ) 
            echo "Error: input and options should be specified, please refer to the manual. ";
            echo "Job terminated without calculation. ";
            exit;;
        esac
        shift
    done
}

# Reorganize input parameters

in_var="header "$@""
get_input_

# Input and output file directories

OUTPUT=${JOBNAME}.out

if [[ -e ${OUTPUT} && -s ${OUTPUT} ]]; then
    echo "Output exists: ${OUTPUT}"
    echo "Job terminated without calculation."
    exit
fi

echo "printed output filename ${OUTPUT}"

# List of available formats & executables

SETFILE=`echo ${0%/*}`/settings

# Set executing command

XDIR=`echo $(grep -w -A 1 'EXEDIR' ${SETFILE} | tail -1)`
PEXE=`echo $(grep -w -A 1 'EXE_PARALLEL' ${SETFILE} | tail -1)`
EXE_OPTIONS=`echo $(grep -w -A 1 'EXE_OPTIONS' ${SETFILE} | tail -1)`
MPIRUN='mpiexec'
MPIRUN_OPTIONS=""

echo "mpi command: ${MPIRUN} ${MPIRUN_OPTIONS}"

if [[ ${XDIR} == *'module load'* ]]; then
    ${XDIR} 2>&1 
else
    PEXE=${XDIR}/${PEXE}
fi

EXECOMMAND="${MPIRUN} ${MPIRUN_OPTIONS} ${PEXE} ${EXE_OPTIONS} ${JOBFILE} ${OPTIONS}"

# Check temporary directory

JOBTMPDIR=`echo $(grep -w -A 1 'JOB_TMPDIR' ${SETFILE} | tail -1)`
if [[ -z ${JOBTMPDIR} ]]; then
    JOBTMPDIR=`pwd`
fi

# Temporary directory

JOBID=${PBS_JOBID%.*}
JOBTMPDIR=${JOBTMPDIR}/${JOBNAME}_${JOBID}
mkdir -p ${JOBTMPDIR}

echo "creating temporary directory ${JOBTMPDIR}"

# Create temporary copy of the script for execution

SCRIPT='Job_script'
sed '1,/^#tag_copy/d' $0 > ${JOBTMPDIR}/${SCRIPT}

# Execute file and post processing

echo "<script>"
cat ${JOBTMPDIR}/${SCRIPT}
echo "</script>"
echo "DATE START: $(date)"
source ${JOBTMPDIR}/${SCRIPT}
echo "DATE END: $(date)"
echo "Script run_exec done."
exit

# Copied content: Below are copied in temporary directory

#tag_copy
# Synchronise nodes

if [[ ! -z ${PBS_NODEFILE} ]]; then
    if [[ -e ${PBS_NODEFILE} ]]; then
        echo '${PBS_NODEFILE}' found: ${PBS_NODEFILE}
        cat ${PBS_NODEFILE}
        PCLIST=`awk '{if ($I != old){printf("%s ",$I);old=$I}}' ${PBS_NODEFILE}`
    else
        echo '${PBS_NODEFILE} not found'
        exit
    fi

    for PC in ${PCLIST[@]}; do
        ssh ${PC} "if [[ ! -d ${JOBTMPDIR} ]]; then mkdir -p ${JOBTMPDIR} ;fi; echo 'temporary directory on '${PC}"
    done
fi

# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF | tee -a ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.in
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable dir:      ${XDIR}
executable:          ${PEXE}
EOF

if [[ ! -z ${PBS_JOBID} ]]; then
    echo "<qstat -f ${PBS_JOBID}>"  | tee -a ${OUTDIR}/${OUTPUT}
    qstat -f ${PBS_JOBID}      2>&1 | tee -a ${OUTDIR}/${OUTPUT}
    echo "</qstat -f ${PBS_JOBID}>" | tee -a ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input file

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE}`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files: jobname.in etc

while [[ ${SAVED_NAME} != *'------------'* ]]; do
    SAVED_NAME="${JOBNAME}.${SAVED_NAME#*.}"
    TMP_NAME="${JOBNAME}.${TMP_NAME#*.}"

    if [[ -e ${INPDIR}/${SAVED_NAME} && -s ${INPDIR}/${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "Found input data: ${INPDIR}/${SAVED_NAME}" 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${SAVED_NAME} copied."

### Synchonise files on all nodes

        if [[ ! -z ${PCLIST} ]]; then
            for PC in ${PCLIST[@]}; do
                ssh ${PC} "cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}"
                echo "File synchonised on ${PC} : ${JOBTMPDIR}/${TMP_NAME}"
            done
        fi
    else
        echo "ERROR: Mandatory input ${INPDIR}/${SAVED_NAME} not found or empty."
        exit
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE}`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## External files

LINE_EXT=`grep -nw 'FILE_EXT' ${SETFILE}`
LINE_EXT=`echo "scale=0;${LINE_EXT%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed -r 's/^.{9}//'`
SAVED_NAME_FLAG=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | cut -c 1-9`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
TMP_NAME_FLAG=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE} | cut -c 1-9`

while [[ ! -z ${TMP_NAME} ]]; do

### Substitute variable flags

    if [[ SAVED_NAME_FLAG == '[jobname]' ]]; then
        SAVED_NAME=${JOBNAME}${SAVED_NAME}
    elif [[ SAVED_NAME_FLAG == '[pre_job]' && ! -z ${REFNAME} ]]; then
        SAVED_NAME=${REFNAME}${SAVED_NAME}
    fi

### Substitute variable flags

    if [[ TMP_NAME_FLAG == '[jobname]' ]]; then
        TMP_NAME=${JOBNAME}${TMP_NAME}
    elif [[ TMP_NAME_FLAG == '[pre_job]' && ! -z ${REFNAME} ]]; then
        TMP_NAME=${REFNAME}${TMP_NAME}
    fi

### Find files in home directory

    if [[ -e ${INPDIR}/${SAVED_NAME} && -s ${INPDIR}/${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "Found input data: ${INPDIR}/${SAVED_NAME}" 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${SAVED_NAME} copied as ${TMP_NAME}."

### Synchonise files on all nodes

        if [[ ! -z ${PCLIST} ]]; then
            for PC in ${PCLIST[@]}; do
                ssh ${PC} "cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}"
                echo "File synchonised on ${PC} : ${JOBTMPDIR}/${TMP_NAME}"
            done
        fi

### File not found

    else
        echo "The optional input data ${INPDIR}/${SAVED_NAME} not found or empty."
    fi

    LINE_EXT=`echo "scale=0;${LINE_EXT}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed -r 's/^.{9}//'`
    SAVED_NAME_FLAG=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | cut -c 1-9`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    TMP_NAME_FLAG=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE} | cut -c 1-9`
done

echo "All files are synchonised." | tee -a ${OUTDIR}/${OUTPUT}

# Launch calculations

echo "" | tee -a ${OUTDIR}/${OUTPUT}
echo "Start the job" | tee -a ${OUTDIR}/${OUTPUT}
echo "Job name: ${JOBNAME} ID: ${PBS_JOBID}" | tee -a ${OUTDIR}/${OUTPUT}
echo "" | tee -a ${OUTDIR}/${OUTPUT}

cd ${JOBTMPDIR}
echo "Entering temporary directory ${JOBTMPDIR}"
echo "Job execution command to be used:"
echo "${EXECOMMAND}"
echo "Job started..."

${EXECOMMAND} 2>&1 | tee -a ${OUTDIR}/${OUTPUT}

exit
