#!/bin/bash

# get inputs in command line style

function get_input_ {

    ## Useful variables: JOBNAME, REFNAME, LMP_OPT: other options of lammps

    param_list=$(getopt -a -l in:,ref: -n "$0" -- ${in_var} 2> /dev/null) 
    echo ${param_list}

    eval set -- "${param_list}"
    LMP_OPT=""
    while [[ true ]]; do
        case $1 in
        --in ) 
            shift; JOBNAME=$1 ;;
        --ref )  
            shift; REFNAME=$1 ;;
        -- ) 
            shift;
            while [[ ! -z $1 ]]; do
                LMP_OPT=`echo "${LMP_OPT} $(echo $1)"`;
                shift;
            done; 
            break;;
        * ) 
            echo "Error: input and options should be specified, please refer to the manual. ";
            echo "Job terminated without calculation. ";
            exit;;
        esac
        shift
    done
}

# Reorganize input parameters

in_var="header "$@""
get_input_

# Input and output file directories

OUTPUT=${JOBNAME}.log

if [[ -e ${OUTPUT} && -s ${OUTPUT} ]]; then
    echo "Output exists: ${OUTPUT}"
    echo "Job terminated without calculation."
    exit
fi

echo "printed output filename ${OUTPUT}"

# List of available formats & executables

SETFILE=`echo ${0%/*}`/settings

# Check temporary directory

JOBTMPDIR=`echo $(grep -w -A 1 'JOB_TMPDIR' ${SETFILE} | tail -1)`
JOBID=${PBS_JOBID%.*}

# Set executing command

XDIR=`echo $(grep -w -A 1 'EXEDIR' ${SETFILE} | tail -1)`
LMP_TYPE=`echo $(grep -w -A 1 'EXE_PLMP' ${SETFILE} | tail -1)`
MPIRUN='mpiexec'
MPIRUN_OPTIONS=""

echo "mpi command: ${MPIRUN} ${MPIRUN_OPTIONS}"

if [[ ${XDIR} == *'module load'* ]]; then
    ${XDIR} 2>&1 
fi

LMPCOMMAND="${MPIRUN} ${MPIRUN_OPTIONS} ${LMP_TYPE} -in ${JOBNAME}.in ${LMP_OPT}"

# Temporary directory

JOBTMPDIR=${JOBTMPDIR}/${JOBNAME}_${JOBID}
mkdir -p ${JOBTMPDIR}

echo "creating temporary directory ${JOBTMPDIR}"

# Create temporary copy of the script for execution

SCRIPT='Job_script'
sed '1,/^#tag_copy/d' $0 > ${JOBTMPDIR}/${SCRIPT}

# Execute file and post processing

echo "<script>"
cat ${JOBTMPDIR}/${SCRIPT}
echo "</script>"
echo -n "DATE START:"
date
source ${JOBTMPDIR}/${SCRIPT}
echo -n "DATE END:"
date
echo "DONE"
exit

# Copied content: Below are copied in temporary directory

#tag_copy
# Synchronise nodes

if [[ ! -z ${PBS_NODEFILE} ]]; then
    if [[ -e ${PBS_NODEFILE} ]]; then
        echo '${PBS_NODEFILE}' found: ${PBS_NODEFILE}
        cat ${PBS_NODEFILE}
        PCLIST=`awk '{if ($I != old){printf("%s ",$I);old=$I}}' ${PBS_NODEFILE}`
    else
        echo '${PBS_NODEFILE} not found'
        exit
    fi

    for PC in ${PCLIST[@]}; do
        ssh ${PC} "if [[ ! -d ${JOBTMPDIR} ]]; then mkdir -p ${JOBTMPDIR} ;fi; echo 'temporary directory on '${PC}"
	done
fi

# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.in
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable dir:      ${XDIR}
executable:          ${LMP_TYPE}
EOF

if [[ ! -z ${PBS_JOBID} ]]; then
    echo "<qstat -f ${PBS_JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    qstat -f ${PBS_JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</qstat -f ${PBS_JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Restart file: refname.restart.stepnumber, edit the main input file

if [[ ! -z ${REFNAME} ]]; then

    if [[ ${REFNAME%%.*} == ${JOBNAME} ]]; then
        echo "Warning: Restart file has the same name as current job."
    fi

    if [[ ${REFNAME} == '*.restart*' ]]; then
        echo "Error: Incorrect restart file name, '.restart*' pattern not found."
        exit
    fi

    TMP_NAME=${REFNAME}

### Find the restart file

    cp ${INPDIR}/${REFNAME} ${JOBTMPDIR}/${TMP_NAME}
    echo "Restart file found: ${INPDIR}/${REFNAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "Restart file found: ${INPDIR}/${REFNAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 

    if [[ ! -z ${PCLIST} ]]; then
        for PC in ${PCLIST[@]}; do
            ssh ${PC} "cp ${INPDIR}/${REFNAME} ${JOBTMPDIR}/${TMP_NAME}"
            echo "File synchonised on ${PC} : ${JOBTMPDIR}/${TMP_NAME}"
        done
    fi

    sed -i '/read_restart/d' ${JOBNAME}.in 2> /dev/null
    sed -i '1i\# auto_generated read_restart line ' ${JOBNAME}.in
    sed -i "1a\read_restart    ${TMP_NAME}" ${JOBNAME}.in
fi

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE}`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory & optional files

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    SAVED_NAME="${JOBNAME}.${SAVED_NAME#*.}"
    TMP_NAME="${JOBNAME}.${TMP_NAME#*.}"

    if [[ -e ${INPDIR}/${SAVED_NAME} && -s ${INPDIR}/${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${SAVED_NAME}"
        echo "input data ${INPDIR}/${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${SAVED_NAME} copied."

### Synchonise files on all nodes

        if [[ ! -z ${PCLIST} ]]; then
            for PC in ${PCLIST[@]}; do
                ssh ${PC} "cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}"
                echo "File synchonised on ${PC} : ${JOBTMPDIR}/${TMP_NAME}"
            done
        fi
    else
        echo "Input data ${INPDIR}/${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE}`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

echo "All files are synchonised." >> ${OUTDIR}/${OUTPUT}

# Launch calculations

echo "" >> ${OUTDIR}/${OUTPUT}
cd ${JOBTMPDIR}
echo "Entering temporary directory ${JOBTMPDIR}" >> ${OUTDIR}/${OUTPUT}
echo "Job name: ${JOBNAME} ID: ${PBS_JOBID} is about to start." >> ${OUTDIR}/${OUTPUT}
echo "" >> ${OUTDIR}/${OUTPUT}

${LMPCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

exit
