#!/bin/bash

# General input format
# runprop --np NCPU --in input --ref refname
# NCPU: int, number of CPUs used
# input: str, input .d3 file, basename recommanded
# refname: str, basename of the reference SCF calculation. (With extension also accepted)

function get_input_ {

    ## Useful variables: NCPU, JOBNAME, REFNAME

    param_list=$(getopt -a -l np:,in:,ref: -n "$0" -- ${in_var} 2> /dev/null) 

    eval set -- "${param_list}"
    while [[ true ]]; do
        case $1 in
        --in ) 
            shift; JOBNAME=${1%.*}; JOBNAME=${JOBNAME##*/} ;;
        --ref ) 
            shift; REFNAME=${1%.*}; REFNAME=${REFNAME##*/} ;;
        --np ) 
            shift; NCPU=$1 ;;
        -- ) 
            break;;
        * ) 
            echo "Error: input and options should be specified, please refer to the manual. ";
            echo "Job terminated without calculation. ";
            exit;;
        esac
        shift
    done

    check_JOBNAME_
    check_REFNAME_
    check_NCPU_
}

function check_JOBNAME_ {
## Whether JOBNAME is specified
    if [[ -z ${JOBNAME} ]]; then
        cat << EOF
    ERROR:
        Jobname MUST BE specified.

EOF
        exit
    fi
## Whether .d12 file exists
    ls -l ${JOBNAME}.d3 > /dev/null 2>&1 
    if [[ $? > 0 ]]; then
        cat << EOF
    ERROR:
        ${JOBNAME}.d3 not found.

EOF
        exit
    fi
## Whether .out file exists
    OUTPUT=${JOBNAME}.out
    ls -l ${OUTPUT} > /dev/null 2>&1 
    if [[ $? == 0 ]]; then
        cat << EOF
    ERROR:
        Output exists: ${OUTPUT}. Move it to a safe place.
        Exit without running calculation.

EOF
        exit
    fi
    echo "printed output filename ${OUTPUT}"
}

function check_REFNAME_ {
## Whether REFNAME is specified
    if [[ -z ${REFNAME} ]]; then
        cat << EOF
    ERROR:
        Refname MUST BE specified.

EOF
        exit
    fi
## Wheter any file contains the string ${REFNAME} exists
    ls -l ${REFNAME}* > /dev/null 2>&1 
    if [[ $? > 0 ]]; then
        cat << EOF
    ERROR:
        ${REFNAME}* not found.

EOF
        exit
    fi
}

function check_NCPU_ {
    if [[ -z ${NCPU} ]]; then
        cat << EOF
    WARNING:
        Number of CPUs MUST BE specified. Set to default value NCPU=1

EOF
        NCPU=1
    fi

    if [[ ${NCPU} -eq 0 ]]; then
        cat << EOF
    ERROR:
        number of CPUs has to be specified

EOF
        exit
    fi

    CHECK_IF_NCPU_IS_AN_INTEGER=`echo $NCPU | awk 'BEGIN{S="YES"};{
        L=length($1);
        for(i=1;i<=L;i++){
            if(substr($1,i,1) !~  /[0-9]/ ){
                S="NO";
                exit
            }
        }};END{print S}'`

    if [[ ${CHECK_IF_NCPU_IS_AN_INTEGER} == "NO" ]]; then
        cat << EOF
    ERROR:
        the number of CPUs has to be an integer number, 
        please check the value: ${NCPU}

EOF
        exit
    fi
}

# List of available formats & executables

SETFILE=`echo ${0%/*}`/settings

# Get jobname and reference file name
in_var="header "$@""
get_input_

# Check temporary directory

JOBTMPDIR=`pwd`
OUTDIR=`pwd`
INPDIR=`pwd`

# Set executing command

## Find executables
XDIR=`echo $(grep -w -A 1 'EXEDIR' ${SETFILE} | tail -1)`
if [[ ! -s ${XDIR} ]]; then
    MODULE="module load ${XDIR}"
    echo "Module '${XDIR}' will be loaded."
    XDIR=""
else
    MODULE=""
    XDIR="${XDIR}/"
fi
if [[ ${NCPU} == 1 ]]; then
    CRYSTAL_TYPE=`echo $(grep -w -A 1 'EXE_PROPERTIES' ${SETFILE} | tail -1)`
else
    CRYSTAL_TYPE=`echo $(grep -w -A 1 'EXE_PPROPERTIES' ${SETFILE} | tail -1)`
fi

## Determine whether to use MPI
if [[ ${NCPU} != 1 ]]; then
    MPI="mpiexec -np ${NCPU}"
else
    MPI=""
fi

## Generate command
${MODULE}
CRYCOMMAND="${MPI} ${XDIR}${CRYSTAL_TYPE}"

# Temporary directory

JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}
mkdir -p ${JOBTMPDIR}

echo "creating temporary directory ${JOBTMPDIR}"

# Create temporary copy of the script for execution

SCRIPT='Job_script'
sed '1,/^#tag_start_calc/d;/^#tag_end_calc/,$d' $0 >> ${JOBTMPDIR}/${SCRIPT}

POST_PROS='Post_script'
sed '1,/^#tag_start_post/d;/^#tag_end_post/,$d' $0 >> ${JOBTMPDIR}/${POST_PROS}

# Execute file and post processing

echo -n "DATE START:"
date
source ${JOBTMPDIR}/${SCRIPT}

echo -n "CALCULATION END DATE " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}
source ${JOBTMPDIR}/${POST_PROS}
cd ${OUTDIR}
rm -fr ${JOBTMPDIR}

echo -n "DATE END:"
date
echo "DONE"
exit

# Copied content: Below are copied in temporary directory

#tag_start_calc
# Generate basic information of output file

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d3
output:              ${OUTDIR}/${OUTPUT}
executable script:   ${EXE_SCRIPT}
executable:          ${XDIR}/${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
temporary directory: ${JOBTMPDIR}
reference job:       ${REFNAME}    
EOF

echo "temporary directory: ${JOBTMPDIR}"
cd  ${JOBTMPDIR}

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d12 && -s ${INPDIR}/${JOBNAME}.d12 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d3' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."

    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files
PRE_JOB=${REFNAME}
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
while [[ ! -z ${TMP_NAME} ]]; do
    if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 

    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

# Most critical one: fort.9 (named as fort.20 now)

if [[ ! -e ${JOBTMPDIR}/fort.20 || ! -s ${JOBTMPDIR}/fort.20 ]]; then
    echo "ERROR: ${JOBTMPDIR}/fort.9 not found or empty. Check ${INPDIR}/${PRE_JOB}.f9"
    exit
else
    mv ${JOBTMPDIR}/fort.20 ${JOBTMPDIR}/fort.9
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_calc

#tag_start_post
cd ${JOBTMPDIR}
# Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

# Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

# Read Properties list

LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

while [[ ! -z ${TMP_NAME} ]]; do
    if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
        cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
        echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
        ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
        echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
    fi
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
done

# Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_post