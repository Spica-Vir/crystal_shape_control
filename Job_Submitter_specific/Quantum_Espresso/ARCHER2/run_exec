#!/bin/bash

# get inputs in command line style

function get_input_ {

    ## Useful variables: 
    ## JOBFILE: Full name of the main input file
    ## JOBNAME: Name without extension
    ## REFNAME: Base name of the reference files

    param_list=$(getopt -a -l x:,in:,ref: -n "$0" -- ${in_var} 2> /dev/null) 
    echo ${param_list}

    eval set -- "${param_list}"
    OPTIONS=""
    REFNAME=""
    while [[ true ]]; do
        case $1 in
        --x )
            shift; PEXE=$1 ;;
        --in ) 
            shift; JOBFILE=$1; JOBNAME=${JOBFILE%.*i} ;;
        --ref )
            shift; REFNAME=${1%.*} ;;
        -- ) 
			shift; TOTJOBNAME=$1; break;;
        * ) 
            echo "Error: input and options should be specified, please refer to the manual. ";
            echo "Job terminated without calculation. ";
            exit;;
        esac
        shift
    done
}

# Reorganize input parameters

in_var="header "$@""
get_input_

# Input and output file directories

OUTPUT=$(echo "${JOBFILE%i}o")
ls ${OUTPUT} > /dev/null 2>&1

if [[ $? -eq 0 ]]; then
    echo "Output exists: ${OUTPUT}"
    echo "Job terminated without calculation."
    exit
fi

echo "printed output filename ${OUTPUT}"

# List of available formats & executables

SETFILE=`echo ${0%/*}`/settings

# Set executing command

XDIR=`echo $(grep -w -A 1 'EXEDIR' ${SETFILE} | tail -1)`
MPIRUN='srun'
MPIRUN_OPTIONS="--hint=nomultithread --distribution=block:block"

if [[ ${XDIR} == *'module load'* ]]; then
    ${XDIR} 2>&1 
else
    PEXE=$(echo "${XDIR}/${PEXE}")
fi

EXECOMMAND="${MPIRUN} ${MPIRUN_OPTIONS} ${PEXE} ${EXE_OPTIONS}"
echo "mpi command: ${EXECOMMAND}"

# Check temporary directory

JOBTMPDIR=`echo $(grep -w -A 1 'JOB_TMPDIR' ${SETFILE} | tail -1)`
if [[ -z ${JOBTMPDIR} ]]; then
    JOBTMPDIR=`pwd`
fi

# Temporary directory

JOBID=`sacct -u ${USER} -n -X --format jobid --name ${TOTJOBNAME}.slurm --state r`
JOBID=`echo ${JOBID} | rev | cut -d' ' -f1 | rev`
JOBTMPDIR=${JOBTMPDIR}/${JOBNAME}_${JOBID}
mkdir -p ${JOBTMPDIR}

echo "creating temporary directory ${JOBTMPDIR}"

# Create temporary copy of the script for execution

SCRIPT='Job_script'
sed '1,/^#tag_copy/d' $0 > ${JOBTMPDIR}/${SCRIPT}

# Execute file and post processing

echo "<script>"
cat ${JOBTMPDIR}/${SCRIPT}
echo "</script>"
echo "DATE START: $(date)"
source ${JOBTMPDIR}/${SCRIPT}
echo "DATE END: $(date)"
echo "Script run_exec done."
exit

# Copied content: Below are copied in temporary directory

#tag_copy
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBFILE}
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${PEXE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`

## Mandatory files

while [[ ! -z ${TMP_NAME} ]]; do

### Substitute variable flags

    if [[ ${SAVED_NAME_FLAG} == '[jobname]' ]]; then
        SAVED_NAME=${JOBNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')
    elif [[ ${SAVED_NAME_FLAG} == '[pre_job]' && ! -z ${REFNAME} ]]; then
        SAVED_NAME=${REFNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')
    fi

### Substitute variable flags
    
    if [[ ${TMP_NAME_FLAG} == '[jobname]' ]]; then
        TMP_NAME=${JOBNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
    elif [[ ${TMP_NAME_FLAG} == '[pre_job]' && ! -z ${REFNAME} ]]; then
        TMP_NAME=${REFNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
    fi

    if [[ -e ${INPDIR}/${SAVED_NAME} && -s ${INPDIR}/${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "Found input data: ${INPDIR}/${SAVED_NAME}" 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${SAVED_NAME} copied."
	fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE}`
    SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`
done

## External files

LINE_EXT=`grep -nw 'FILE_EXT' ${SETFILE}`
LINE_EXT=`echo "scale=0;${LINE_EXT%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $1)}' ${SETFILE}`
SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
TMP_NAME=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $2)}' ${SETFILE}`
TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`

while [[ ! -z ${TMP_NAME} ]]; do

### Substitute variable flags

    if [[ ${SAVED_NAME_FLAG} == '[jobname]' ]]; then
        SAVED_NAME=${JOBNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')
    elif [[ ${SAVED_NAME_FLAG} == '[pre_job]' && ! -z ${REFNAME} ]]; then
        SAVED_NAME=${REFNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')
    fi

### Substitute variable flags
    
    if [[ ${TMP_NAME_FLAG} == '[jobname]' ]]; then
        TMP_NAME=${JOBNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
    elif [[ ${TMP_NAME_FLAG} == '[pre_job]' && ! -z ${REFNAME} ]]; then
        TMP_NAME=${REFNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
    fi

### Find files in home directory

    if [[ -e ${INPDIR}/${SAVED_NAME} && -s ${INPDIR}/${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "Found input data: ${INPDIR}/${SAVED_NAME}" 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        cp ${INPDIR}/${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${SAVED_NAME} copied as ${TMP_NAME}."

### File not found

    else
        echo "The optional input data ${INPDIR}/${SAVED_NAME} not found or empty."
    fi

    LINE_EXT=`echo "scale=0;${LINE_EXT}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $1)}' ${SETFILE}`
    SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
    TMP_NAME=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $2)}' ${SETFILE}`
    TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`
done

echo "All files are synchonised." | tee -a ${OUTDIR}/${OUTPUT}

# Launch calculations

echo "" | tee -a ${OUTDIR}/${OUTPUT}
echo "Start the job" | tee -a ${OUTDIR}/${OUTPUT}
echo "Job name: ${JOBNAME} ID: ${JOBID}" | tee -a ${OUTDIR}/${OUTPUT}
echo "" | tee -a ${OUTDIR}/${OUTPUT}

cd ${JOBTMPDIR}
echo "Entering temporary directory ${JOBTMPDIR}"
echo "Job execution command to be used:"
echo "${EXECOMMAND} < ${JOBFILE} > ${OUTDIR}/${OUTPUT}"
echo "Job starts..."

${EXECOMMAND} < ${JOBFILE} > ${OUTDIR}/${OUTPUT} 2>&1

exit
