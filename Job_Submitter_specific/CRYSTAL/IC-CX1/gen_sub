#!/bin/bash

# General input format
# gen_sub --type jobtype --in input --ref refname --nd ND --wt WT
# jobtype: str, crys / prop (usually included in user defined commands)
# ND:      int, number of nodes
# WT:      str, walltime, hh:mm time format
# jobname: str, input .d12 or .d3 file, with or without extension
# refname: str, optional, name of the previous run
# The sequence of input parameters can be changed

function get_input_ {

    ## Useful variables: JOBTYPE, WT, ND, JOBNAME, REFNAME

    param_list=$(getopt -a -l type:,nd:,wt:,in:,ref: -n "$0" -- ${in_var} 2> /dev/null) 
    cat << EOF
    INPUT parameters:
        ${param_list}

EOF

    eval set -- "${param_list}"
    while [[ true ]]; do
        case $1 in
        --type ) 
            shift; JOBTYPE=$1 ;;
        --in ) 
            shift; JOBNAME=${1%.*}; JOBNAME=${JOBNAME##*/} ;;
        --ref ) 
            shift; REFNAME=${1%.*}; REFNAME=${REFNAME##*/} ;;
        --nd ) 
            shift; ND=$1 ;;
        --wt ) 
            shift; WT=$1 ;;
        -- ) 
            break;;
        * ) 
            print_HOWTO_
            exit;;
        esac
        shift
    done

    check_JOBTYPE_
    check_JOBNAME_
    check_REFNAME_
    check_WT_
    check_ND_
}

# Get jobtype from input & define the script

function check_JOBTYPE_ {
    if [[ ${JOBTYPE} == 'crys' || ${JOBTYPE} == 'CRYS' ]]; then
        JOBTYPE=crys
    elif [[ ${JOBTYPE} == 'prop' || ${JOBTYPE} == 'PROP' ]]; then
        JOBTYPE=prop
    else
        print_HOWTO_JOBTYPE_
        exit
    fi
}

# Instruction for jobtype

function print_HOWTO_JOBTYPE_ {
    cat << EOF
    -------------------------------------------
    To avoid ambiguity, the job type can be set
    by using the following options:

    crys
    CRYS
    prop
    PROP

    Examples:
    `basename $0` --type CRYS --nd 4 --wt 02:00  --in mgo.d12 
    `basename $0` --type prop --nd 1 --wt 00:30  --in mgo.d3 --ref mgo-scf.

EOF
}

# Check jobname

function check_JOBNAME_ {
## Whether JOBNAME is specified
    if [[ -z ${JOBNAME} ]]; then
        print_HOWTO_JOBNAME_
        exit
    fi
## input not exist
    if [[ ${JOBTYPE} == 'crys' ]]; then
        jobfile=${INPDIR}/${JOBNAME}.d12
    else
        jobfile=${INPDIR}/${JOBNAME}.d3
    fi
    ls ${jobfile} > /dev/null 2>&1
    if [[ $? == 1 ]]; then
        cat << EOF
    ERROR: 
        input file does not exist. please check: ${JOBNAME}

EOF
        exit
    fi
## wrong extension
    if [[ ! -e ${jobfile} || ! -s ${jobfile} ]]; then
        cat << EOF
    ERROR:
        input file extension is not consistent with the jobtype specified. 
        please check the jobtype: ${JOBTYPE} or the jobname: ${JOBNAME}

        .d12 ---> CRYSTAL calculations
        .d3  ---> PROPERTIES calculations

EOF
        exit
    fi
### output exists
    if [[ -e ${INPDIR}/${JOBNAME}.out && -s ${INPDIR}/${JOBNAME}.out ]]; then
        cat << EOF
    ERROR:
        output file ${JOBNAME}.out already exists in ${INPDIR}/. 
        Please consider to move it to a safe place. 

        Exit without performing calculations. 

EOF
        exit
    fi
    echo "printed output filename ${OUTPUT}"
}

# Instruction for --in

function print_HOWTO_JOBNAME_ {
    cat << EOF
    -------------------------------------------
    To avoid ambiguity, the name of input files can be set 
    by using the following options (with or without extensions):

    --in
        
    Example:
    `basename $0` --type CRYS --nd 4 --wt 02:00  --in mgo.d12 

EOF
}

# Check reference file name

function check_REFNAME_ {
    if [[ ! -z ${REFNAME} ]]; then
## Wheter any file contains the string ${REFNAME} exists
        ls -l ${REFNAME}* > /dev/null 2>&1 
        if [[ $? > 0 ]]; then
            cat << EOF
    ERROR:
        ${REFNAME}* not found.

EOF
            exit
        fi
    fi
## Properties calculations
    if [[ -z ${REFNAME} && ${JOBTYPE}=='prop' ]]; then
        cat << EOF
    ERROR:
        ${REFNAME}* not found - Mandatory for properties calculations.

EOF
    fi
}

# Check number of nodes

function check_ND_ {
    if [[ -z ${ND} || ${ND} -eq 0 ]]; then
        cat << EOF
    WARNING:
        Number of nodes MUST BE specified. Set to default value ND=1

EOF
        ND=1
    fi

    CHECK_IF_ND_IS_AN_INTEGER=`echo $ND | awk 'BEGIN{S="YES"};{
        L=length($1);
        for(i=1;i<=L;i++){
            if(substr($1,i,1) !~  /[0-9]/ ){
                S="NO";
                exit
            }
        }};END{print S}'`

    if [[ ${CHECK_IF_ND_IS_AN_INTEGER} == "NO" ]]; then
        cat << EOF
    ERROR:
        the number of nodes has to be an integer number, 
        please check the value: ${ND}

EOF
        print_HOWTO_ND_
        exit
    fi
}

# Instruction for ND

function print_HOWTO_ND_ {
    cat << EOF
    -------------------------------------------
    To avoid ambiguity, the number of nodes can be set 
    by using the following options:

    --nd number of nodes
        
    Examples:
    `basename $0` -type CRYS --nd 4 --wt 02:00  --in mgo.d12 

EOF
}

# Check walltime

function check_WT_ {
    separator=`echo ${WT} | grep ':'`

    if [[ -z ${separator} ]]; then
        cat << EOF
    WARNING:
        Separator not specified, any number will be regarded as minutes.

EOF
        WT="00:${WT}"
    fi

    if [[ -z ${WT} ]]; then
        cat << EOF
    WARNING:
       wall time has to be specified
       if not specified, the walltime is set to 12:00

EOF
        WT="12:00"
    fi
    CHECK_IF_WT_HAS_A_hhmm_FORMAT=`echo ${WT} | awk 'BEGIN{S="YES"};{
        c=length($1)-match($1,":");
        if(c!=2){S="NO";exit}};{
        gsub(":","",$1);
        L=length($1);
        for(i=1;i<=L;i++){
            if(substr($1,i,1) !~  /[0-9]/ ){
                S="NO";
                exit
            }
        }};END{print S}'`

    if [[ ${CHECK_IF_WT_HAS_A_hhmm_FORMAT} == "NO" ]]; then
        cat << EOF
    ERROR:
        the format of walltime has to be hh:mm 
        please check the format: ${WT}

EOF
        exit
    fi
}

# Instruction for WT

function print_HOWTO_WT_ {
    cat << EOF
    -------------------------------------------
    To avoid ambiguity, the walltime can be set
    by using the following options:

    --wt walltime

    Examples:
    `basename $0` --type CRYS --nd 4 --wt 02:00  --in mgo.d12 

EOF
}

# General instruction

function print_HOWTO_ {
    cat << EOF
    ERROR:
        number of input parameters does not meet the requirements or is ambiguous. 
        please check your command. 

    HOWTO: 
        `basename $0` --type jobtype --in input --ref refname --nd ND --wt WT
        jobtype --> str, crys / prop
        ND      --> int, number of nodes
        WT      --> str, walltime, hh:mm time format
        jobname --> str, input .d12 or .d3 file, with or without extension
        refname --> optional, name of the previous run, with or without extension

        The sequence of input parameters is flexible

    Examples:
        `basename $0` --type CRYS --nd 4 --wt 02:00  --in mgo.d12 --ref mgo-opt.

EOF
    print_HOWTO_JOBTYPE_
    print_HOWTO_JOBNAME_
    print_HOWTO_ND_
    print_HOWTO_WT_
}

# check job execution scripts

function check_scripts_ {
    if [[ ${JOBTYPE} == 'crys' ]]; then
        SCRIPT=`echo $(grep -w -A 1 'CRYSTAL_SCRIPT' ${SETFILE} | tail -1)`
    else
        SCRIPT=`echo $(grep -w -A 1 'PROPERTIES_SCRIPT' ${SETFILE} | tail -1)`
    fi

    POSCRIPT=`echo $(grep -w -A 1 'POST_PROCESSING_SCRIPT' ${SETFILE} | tail -1)`

    ls ${SCRIPTDIR}/${SCRIPT} > /dev/null 2>&1
    if [[ $? == 1 ]]; then
        cat << EOF
    ERROR:
        cannot find job execution script in ${SCRIPTDIR}/${SCRIPT}.
        please check: ${SETFILE}

EOF
        exit
    fi

    ls ${SCRIPTDIR}/${POSCRIPT} > /dev/null 2>&1
    if [[ $? == 1 ]]; then
        cat << EOF
    ERROR:
        cannot find post processing script in ${SCRIPTDIR}/${POSCRIPT}.
        please check: ${SETFILE}

EOF
        exit
    fi
}

# get submission file template and necessary information

function get_subtemplate_ {
## template file
    BG_TEMP=`grep -nw 'JOB_SUBMISSION_TEMPLATE' ${SETFILE}`
    BG_TEMP=`echo "scale=0;${BG_TEMP%%:*}+2" | bc`

    line_endflag=${BG_TEMP}
    endflag=`awk NR==${line_endflag}'{print}' ${SETFILE}`

    while [[ ${endflag} != *'------------------'* ]]; do
        line_endflag=`echo "scale=0;${line_endflag}+1" | bc`
        endflag=`awk NR==${line_endflag}'{print}' ${SETFILE}`
    done

    ED_TEMP=`echo "scale=0;${line_endflag}-1" | bc`
    TEMPT=`sed -n "${BG_TEMP},${ED_TEMP}p" ${SETFILE}`
}

# get necessary information from settings file
function get_subinfo_ {
## extension for submission file
    SUB_EXT=`echo $(grep -w -A 1 'SUBMISSION_EXT' ${SETFILE} | tail -1)`
    SUB_EXT=${SUB_EXT#*.}
## number of processors per node
    NCPU=`echo $(grep -w -A 1 'NCPU_PER_NODE' ${SETFILE} | tail -1)`
    CHECK_IF_NCPU_IS_AN_INTEGER=`echo ${NCPU} | awk 'BEGIN{S="YES"};{
        L=length($1);
        for(i=1;i<=L;i++){
            if(substr($1,i,1) !~  /[0-9]/ ){
                S="NO";
                exit
            }
        }};END{print S}'`
    if [[ ${CHECK_IF_NCPU_IS_AN_INTEGER} == "NO" ]]; then
        cat << EOF
    ERROR:
        the number of CPUs has to be hh:mm 
        please check the keyword 'NCPU_PER_NODE' in: ${SETFILE}

EOF
        exit
    fi
## number of processors
    NP=`echo "scale=0;${ND}*${NCPU}" | bc`
## memory per node
    MEM=`echo $(grep -w -A 1 'MEM_PER_NODE' ${SETFILE} | tail -1)`
    MEM=${MEM%G*}
    MEM=${MEM%g*}
# ## Budget code
#     BUDGET=`echo $(grep -w -A 1 'BUDGET_CODE' ${SETFILE} | tail -1)`
# ## Quality of service
#     QOS=`echo $(grep -w -A 1 'QOS' ${SETFILE} | tail -1)`
# ## Partition of service
#     QOS=`echo $(grep -w -A 1 'PARTITION' ${SETFILE} | tail -1)`
## Time spared for post processing
    TOUT=`echo $(grep -w -A 1 'TIME_OUT' ${SETFILE} | tail -1)`
}

# generate submission file

function generate_subfile_ {
    get_subtemplate_
    get_subinfo_
    cat << EOF > ${JOBNAME}.${SUB_EXT}
${TEMPT}
EOF
    
## Calculate the timeout for runnning calculations
    thr=${WT%:*}
    tmn=${WT#*:}
    TOUT=`echo "scale=0;${thr}*60+${tmn}-${TOUT}" | bc`
    TOUT=`echo ${TOUT}m`
## Add seconds for WT
    WT="${WT}:00"

    sed -i "s|\${V_JOBNAME}|${JOBNAME}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_ND}|${ND}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_NCPU}|${NCPU}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_MEM}|${MEM}GB|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_WT}|${WT}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_NP}|${NP}|g" ${JOBNAME}.${SUB_EXT}
    # sed -i "s|\${V_BUDGET}|${BUDGET}|g" ${JOBNAME}.${SUB_EXT}
    # sed -i "s|\${V_QOS}|${QOS}|g" ${JOBNAME}.${SUB_EXT}
    # sed -i "s|\${V_PARTITION}|${PARTITION}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_TOUT}|${TOUT}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_SCRIPTDIR}|${SCRIPTDIR}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_SCRIPT}|${SCRIPT}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_REFNAME}|${REFNAME}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_POSCRIPT}|${POSCRIPT}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_JOBTYPE}|${JOBTYPE}|g" ${JOBNAME}.${SUB_EXT}
}

# Main I/O function

INPDIR=`pwd`
SCRIPTDIR=`echo ${0%/*}`
SETFILE=${SCRIPTDIR}/settings

# Get input parameters
in_var="header "$@""
get_input_

check_scripts_

echo "jobtype                       = " ${JOBTYPE}
echo "job submission script         = " ${SCRIPT}
echo "number of nodes requested     = " ${ND}
echo "wall time                     = " ${WT}
echo "input directory               = " ${INPDIR}
echo "input file                    = " ${JOBNAME}
if [[ ! -z ${REFNAME} ]]; then
    echo "reference file                = " ${REFNAME}
fi

generate_subfile_

cat << EOF

 file ${JOBNAME}.${SUB_EXT} has been generated.

EOF
exit
