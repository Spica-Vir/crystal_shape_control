#!/bin/bash

# get inputs in command line style

function get_input_ {

    ## Useful variables: JOBNAME

    param_list=$(getopt -a -l in: -n "$0" -- ${in_var} 2> /dev/null) 
    echo ${param_list}

    eval set -- "${param_list}"
    LMP_OPT=""
    while [[ true ]]; do
        case $1 in
        --in ) 
            shift; JOBNAME=$1 ;;
        -- ) 
            break;;
        * ) 
            echo "Error: input and options should be specified, please refer to the manual. ";
            echo "Job terminated without calculation. ";
            exit;;
        esac
        shift
    done
}

# Restore variables - kept same as job submission script
in_var="header "$@""
get_input_
SETFILE=`echo ${0%/*}`/settings
JOBID=${PBS_JOBID%.*}
INPDIR=`pwd`
OUTDIR=`pwd`
OUTPUT=${JOBNAME}.log
JOBTMPDIR=`echo $(grep -w -A 1 'JOB_TMPDIR' ${SETFILE} | tail -1)`
JOBTMPDIR=${JOBTMPDIR}/${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile
# Remove external files

LINE_EXT=`grep -nw 'FILE_EXT' ${SETFILE}`
LINE_EXT=`echo "scale=0;${LINE_EXT%%:*}+4" | bc`

COMMAND=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $1)}' ${SETFILE}`

while [[ ${COMMAND} != *'------------'* ]]; do
    grep "${COMMAND}" ${INPDIR}/${JOBNAME}.in > /dev/null 2>&1 

    if [[ $? == 0 ]]; then
        lines=`sed -n "/${COMMAND}/=" ${INPDIR}/${JOBNAME}.in`
        lines=(${lines// /})
        for line in ${lines[@]}; do
            EXT_NAME=`awk 'NR=='"${line}"'{printf "%s", $2}' ${INPDIR}/${JOBNAME}.in | sed 's/\"//g'`
            rm ${EXT_NAME}
        done
    fi

    LINE_EXT=`echo "scale=0;${LINE_EXT}+1" | bc`
    COMMAND=`awk 'NR=="'${LINE_EXT}'"{printf("%s", $1)}' ${SETFILE}`
done

# Read POST_CALC list

LINE_POSTCALC=`grep -nw 'POST_CALC' ${SETFILE}`
LINE_POSTCALC=`echo "scale=0;${LINE_POSTCALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $1)}' ${SETFILE}`
TMP_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $2)}' ${SETFILE}`

while [[ ! -z ${TMP_NAME} ]]; do
    SAVED_NAME="${JOBNAME}.${SAVED_NAME#*.}"

## .log file: LAMMPS output information only

    if [[ ${SAVED_NAME: -1} != '/' && -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
        echo "File identified: ${TMP_NAME}, saved as: ${OUTDIR}/${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${SAVED_NAME}
        echo "${TMP_NAME} ${SAVED_NAME}" | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
        ls -l ${TMP_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1

## Restart and dump 

    elif [[ ${SAVED_NAME: -1} = '/' ]]; then
        filelist=`find ${JOBTMPDIR} -name "${TMP_NAME}"`
        filelist=(${filelist//${JOBTMPDIR}\//})
        if [[ ${#filelist[@]} > 1 ]]; then
            mkdir "${OUTDIR}/${SAVED_NAME}"
            echo "Files identified: ${TMP_NAME}, saved in: ${OUTDIR}/${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            for file in ${filelist[@]}; do
                cp ${JOBTMPDIR}/${file} ${OUTDIR}/${SAVED_NAME}
                echo "${file} ${SAVED_NAME}" | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                ls -l ${file} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            done
        elif [[ ${#filelist[@]} -eq 1 ]]; then
            echo "File identified: ${filelist[0]}, saved in: ${OUTDIR}/${filelist[0]}" >> ${OUTDIR}/${OUTPUT} 2>&1
            cp ${JOBTMPDIR}/${filelist[0]} ${OUTDIR}/${filelist[0]}
            echo "${filelist[0]} ${filelist[0]}" | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${filelist[0]} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
        fi
    fi

    LINE_POSTCALC=`echo "scale=0;${LINE_POSTCALC%%:*}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $1)}' ${SETFILE}`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", $2)}' ${SETFILE}`
done

# Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

if [[ ! -z ${PBS_NODEFILE} ]]; then
    for PC in ${PCLIST[@]}; do
        echo "#########"                 >> ${OUTDIR}/${OUTPUT}
        echo "node: "${PC}               >> ${OUTDIR}/${OUTPUT}
        echo "scp ${JOBTMPDIR}/checkfile0   ${PC}:${JOBTMPDIR}/checkfile"
        scp ${JOBTMPDIR}/checkfile0         ${PC}:${JOBTMPDIR}/checkfile
        ssh ${PC} "                         ${JOBTMPDIR}/checkfile"
    done
fi

# Remove temporary directory

cd ${OUTDIR}
rm -fr ${JOBTMPDIR}
exit
