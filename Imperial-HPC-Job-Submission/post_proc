#!/bin/bash

# get inputs in command line style

function get_input_ {

    # Useful variables: 
    # SETFILE: Path to 'settings' file
    # JOBNAME: Input file name without extension

    param_list=$(getopt -a -l set:,in: -n "$0" -- ${in_var} 2> /dev/null) 
    eval set -- "${param_list}"
    while [[ true ]]; do
        case $1 in
        --in ) 
            shift; JOBFILE=$1; JOBNAME=${JOBFILE%.*}; JOBNAME=${JOBNAME##*/}  ;;
        --set )
            shift; SETFILE=$1 ;;
        -- ) 
            break;;
        * ) 
            echo "Error: Input not recognized. Refer to the manual. ";
            echo "Job terminated without calculation. ";
            exit;;
        esac
        shift
    done
}

# Restore variables - kept same as job submission script
in_var="header "$@""
get_input_
OUTDIR=$(realpath ${JOBFILE})
OUTDIR=${OUTDIR%/*}
OUTPUT=${JOBNAME}.out
INPDIR=${OUTDIR}
JOBTMPDIR=`echo $(grep -w -A 1 'JOB_TMPDIR' ${SETFILE} | tail -1)`
if [[ -z ${JOBTMPDIR} || ${JOBTMPDIR} == 'default' ]]; then # As subdirectory under the current one
    JOBTMPDIR=$(dirname ${JOBFILE})/${JOBNAME}_${PBS_JOBID%.*}
    move_file=true
elif [[ ${JOBTMPDIR} == 'nodir' ]]; then # In current directory
    JOBTMPDIR=$(dirname ${JOBFILE})
    move_file=false
else # In a separate directory
    JOBTMPDIR=${JOBTMPDIR}/${JOBNAME}_${PBS_JOBID%.*}
    move_file=true
fi

# Create temporary copy of the script for execution

POSTSCRIPT="Post_script"
sed '1,/^#tag_copy/d' $0 > ${JOBTMPDIR}/${POSTSCRIPT}

# Start post-processing
cat << EOF | tee -a ${OUTDIR}/${OUTPUT}
Post Processing Report
--------------------------------------------
Begining of post processing : $(date)
List of saved files
  TEMPORARY            SAVED
EOF

source ${JOBTMPDIR}/${POSTSCRIPT}

cat << EOF | tee -a ${OUTDIR}/${OUTPUT}
End of post processing : $(date)
Script post_proc done.
--------------------------------------------
EOF
exit

# Copied content: Between #tag_start_copy and #tag_end_copy are copied in temporary directory
#tag_copy
#tag_start_copy
cd ${JOBTMPDIR}

# Read POST_CALC list

LINE_POSTCALC=`grep -nw 'POST_CALC' ${SETFILE}`
LINE_POSTCALC=`echo "scale=0;${LINE_POSTCALC%%:*}+4" | bc`

SAVED_NAME=`echo $(awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", substr($0,1,21))}' ${SETFILE})`
SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
TMP_NAME=`echo $(awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", substr($0,22,21))}' ${SETFILE})`
TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`

while [[ ${TMP_NAME} != '---------'* && ${move_file} == true ]]; do

    # Substitute variable flags for saved name in INPDIR

    if [[ ${SAVED_NAME_FLAG} == '[jobname]' ]]; then
        SAVED_NAME=${JOBNAME}$(echo ${SAVED_NAME} | sed -r 's/^.{9}//')
    fi

    # Substitute variable flags for temporary name in JOBTMPDIR

    if [[ ${TMP_NAME_FLAG} == '[jobname]' ]]; then
        TMP_NAME=${JOBNAME}$(echo ${TMP_NAME} | sed -r 's/^.{9}//')
    fi

    # List files, to get all matched files in 'TMP_NAME' settings

    filelist=`find ${JOBTMPDIR} -name "${TMP_NAME}"`
    filelist=(${filelist//${JOBTMPDIR}\//})

    # Make subdir for files stored in sub-folders 

    if [[ ${SAVED_NAME: -1} == '/' && ${#filelist[@]} -ge 1 ]]; then
        mkdir -p "${OUTDIR}/${SAVED_NAME}"
    fi
    for file in ${filelist[@]}; do

        # Make sure the file is not empty

        if [[ ! -s ${JOBTMPDIR}/${file} ]]; then
            continue
        fi

        # If SAVED_NAME has '*', keep the original name

        if [[ ${SAVED_NAME} == *'*'* ]]; then
            SAVED_NAME=${file}
        fi

        # Copy files - cover the old ones
        if [[ -e ${OUTDIR}/${SAVED_NAME} && -s ${OUTDIR}/${SAVED_NAME} ]]; then
            echo "Warning! Duplicate file detected in out directory: ${OUTDIR}/${SAVED_NAME}." 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
            echo "  The file will be covered by the new entry ${JOBTMPDIR}/${TMP_NAME}." 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        fi
        echo "${file} ${SAVED_NAME}" | awk '{printf("  %-21s%-12s"),$1,$2}' 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        ls -l ${file} | awk '{printf("  %-8s %s %s %s\n"),$5,$6,$7,$8}' 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        cp -r ${JOBTMPDIR}/${file} ${OUTDIR}/${SAVED_NAME}
    done

    LINE_POSTCALC=`echo "scale=0;${LINE_POSTCALC%%:*}+1" | bc`
    SAVED_NAME=`echo $(awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", substr($0,1,21))}' ${SETFILE})`
    SAVED_NAME_FLAG=`echo "${SAVED_NAME}" | cut -c 1-9`
    TMP_NAME=`echo $(awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", substr($0,22,21))}' ${SETFILE})`
    TMP_NAME_FLAG=`echo "${TMP_NAME}" | cut -c 1-9`
done

# Calculation summary

cat << EOF | tee -a ${OUTDIR}/${OUTPUT}
--------------------------------------------

Temporary Directory Disk Info
--------------------------------------------
  Temporary directory      : ${JOBTMPDIR}

  Disk usage (df -h)
$(df -h ${JOBTMPDIR} 2>&1)

  Usage by folders (du -m)
$(du -m ${JOBTMPDIR} 2>&1)

  Detailed file list (ls -l .)
$(ls -l . 2>&1)
--------------------------------------------

EOF

#tag_end_copy
# Check files on all nodes before exiting

cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
SETFILE=${SETFILE}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
chmod 755 ${JOBTMPDIR}/checkfile0
if [[ ! -z ${PBS_NODEFILE} ]]; then
    echo "Check files across nodes ..."
    echo "List of saved files"
    echo "  TEMPORARY            SAVED"
    PCLIST=`awk '{if ($I != old){printf("%s ",$I);old=$I}}' ${PBS_NODEFILE}`
    for ((i = 2; i < ${#PCLIST[@]}; i++)); do
        PC=${PCLIST[$i]}
        echo "--------------------------------------------"
        echo "node: ${PC}, checkfile..."
        echo "scp ${JOBTMPDIR}/checkfile0    ${PC}:${JOBTMPDIR}/checkfile"
        scp ${JOBTMPDIR}/checkfile0 ${PC}:${JOBTMPDIR}/checkfile
        ssh ${PC} "source ${JOBTMPDIR}/checkfile"
        echo "node: ${PC}, checkfile ended."
        echo "--------------------------------------------"
        echo ""
    done
fi

# Remove temporary directory

cd ${OUTDIR}
if [[ ${move_file} == true ]]; then
    rm -fr ${JOBTMPDIR}
fi

