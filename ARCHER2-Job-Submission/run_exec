#!/bin/bash

# get inputs in command line style

function get_input_ {

    # Useful variables: 
    # SETFILE: Path to 'settings' file
    # JOBFILE: Full name of the main input file
    # JOBNAME: Input file name without extension
    # REFNAME: Reference file name without extension
    # COMMAND: Command + options to lauch calculation

    param_list=$(getopt -a -l set:,in:,ref:: -n "$0" -- ${in_var} 2> /dev/null) 
    eval set -- "${param_list}"
    COMMAND=""
    REFNAME=""
    while [[ true ]]; do
        case $1 in
        --set )
            shift; SETFILE=$1 ;;
        --in ) 
            shift; JOBFILE=$1; JOBNAME=${JOBFILE%.*}; JOBNAME=${JOBNAME##*/} ;;
        --ref )
            shift; 
			if [[ -z $1 ]]; then
			    REFNAME=$1;
				REFNAME=${REFNAME%.*}; 
				REFNAME=${REFNAME##*/};
			fi ;;
        -- ) 
            shift;
            while [[ ! -z $1 ]]; do
                COMMAND=`echo "${COMMAND} $1"`;
                shift;
            done; 
            break ;;
        * ) 
            echo "Error: Input not recognized. Refer to the manual. ";
            echo "Job terminated without calculation. ";
            exit ;;
        esac
        shift
    done
}

# Reorganize input parameters

in_var="header "$@""
get_input_

# Input and output file directories

OUTDIR=$(realpath ${JOBFILE})
OUTDIR=${OUTDIR%/*}
OUTPUT=${JOBNAME}.out

if [[ -e ${OUTDIR}/${OUTPUT} && -s ${OUTDIR}/${OUTPUT} ]]; then
    echo "Warning! Output exists: ${OUTDIR}/${OUTPUT}" | tee -a ${OUTDIR}/${OUTPUT}
    echo "New data will be attached to the same file." | tee -a ${OUTDIR}/${OUTPUT}
fi

echo "Printed output filename ${OUTDIR}/${OUTPUT}"

# List of available formats & executables
# Set executing command & MPI

XDIR=`echo $(grep -w -A 1 'EXEDIR' ${SETFILE} | tail -1)`
if [[ ${XDIR} == *'module load'* ]]; then
    ${XDIR} 2>&1
else
    export PATH="${XDIR}:${PATH}"
fi

MDIR=`echo $(grep -w -A 1 'MPIDIR' ${SETFILE} | tail -1)`
if [[ ${MDIR} == *'module load'* ]]; then
    ${MDIR} 2>&1
else
    export PATH="${MDIR}:${PATH}"
fi
# This substitution is doubtful - works occasionally. [job] is substituted in gen_sub.
EXECOMMAND=`echo ${COMMAND} | sed "s/\[job.*\]/${JOBNAME}/g"` 
echo "MPI command: ${EXECOMMAND}"

# Set temporary directory

JOBTMPDIR=`echo $(grep -w -A 1 'JOB_TMPDIR' ${SETFILE} | tail -1)`
if [[ -z ${JOBTMPDIR} || ${JOBTMPDIR} == *'default'* ]]; then # As subdirectory under the current one
    JOBTMPDIR=$(dirname ${JOBFILE})/${JOBNAME}_${SLURM_JOB_ID}
    JOBTMPDIR=`realpath ${JOBTMPDIR}`
    move_file=true
    mkdir -p ${JOBTMPDIR}
    echo "Temporary directory : ${JOBTMPDIR}"
elif [[ ${JOBTMPDIR} == *'nodir'* ]]; then # In current directory
    JOBTMPDIR=$(dirname ${JOBFILE})
    JOBTMPDIR=`realpath ${JOBTMPDIR}`
    move_file=false
    echo "Temporary file stored under the current directory ${OUTDIR}"
else # In a separate directory
    JOBTMPDIR=${JOBTMPDIR}/${JOBNAME}_${SLURM_JOB_ID}
    JOBTMPDIR=`realpath ${JOBTMPDIR}`
    move_file=true
    mkdir -p ${JOBTMPDIR}
    echo "Temporary directory : ${JOBTMPDIR}"
fi

# Create temporary copy of the script for execution

SCRIPT="Job_script"
sed '1,/^#tag_copy/d' $0 > ${JOBTMPDIR}/${SCRIPT}

# Execute file 

cat << EOF 
Job Executation Script
--------------------------------------------
${JOBTMPDIR}/${SCRIPT}
--------------------------------------------

EOF
cat << EOF | tee -a ${OUTDIR}/${OUTPUT}
Running Job Report
--------------------------------------------
DATE START : $(date)

EOF
source ${JOBTMPDIR}/${SCRIPT}
cat << EOF | tee -a ${OUTDIR}/${OUTPUT}

DATE END   : $(date)
Script run_exec done.
--------------------------------------------

EOF
exit

# Copied content: Below are copied in temporary directory

#tag_copy
# Synchronise nodes

if [[ ! -z ${SLURM_JOB_NODELIST} ]]; then
    cat << EOF
SLURM NODEFILE Info
--------------------------------------------
${SLURM_JOB_NODELIST}
--------------------------------------------

EOF
else
    echo 'SLURM node information is not found'
    exit
fi

# Generate basic information of output file

INPDIR=${OUTDIR}

cat << EOF | tee -a ${OUTDIR}/${OUTPUT}
Pre-Calc Summary
--------------------------------------------
  date:                `date`
  hostname:            `hostname`
  system:              `uname -a`
  user:                `whoami`
  queue:               ${SLURM_JOB_PARTITION}
  QOS:                 ${SLURM_JOB_QOS}
  input:               ${OUTDIR}/${JOBFILE##/*}
  output:              ${OUTDIR}/${OUTPUT}
  temporary directory: ${JOBTMPDIR}
  executable script:   $0
  executable dir:      ${XDIR}
  mpi + exe command:   ${COMMAND}
-------------------------------------------

EOF

cat << EOF | tee -a ${OUTDIR}/${OUTPUT}
SLURM Job Status
-------------------------------------------
  $(squeue -j ${SLURM_JOB_ID} 2>&1)
-------------------------------------------

EOF

# Check and read input file
# Read mandatory file list - Same as JOBNAME (Table PRE_CALC)

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`echo $(awk 'NR=="'${LINE_PRECALC}'"{printf("%s", substr($0,1,21))}' ${SETFILE})`
TMP_NAME=`echo $(awk 'NR=="'${LINE_PRECALC}'"{printf("%s", substr($0,22,21))}' ${SETFILE})`

while [[ ${TMP_NAME} != '---------'* && ${move_file} == true ]]; do

    # Substitute variable flags for saved name in INPDIR

    SAVED_NAME=`echo ${SAVED_NAME} | sed "s/\[job.*\]/${JOBNAME}/g"`

    # Substitute variable flags for temporary name in JOBTMPDIR

    TMP_NAME=`echo ${TMP_NAME} | sed "s/\[job.*\]/${JOBNAME}/g"`
    TMP_NAME=`echo ${TMP_NAME} | sed "s/\[ref.*\]/${REFNAME}/g"`

    # List files, to get all matched files in 'SAVED_NAME' settings

    filelist=`find ${INPDIR} -name "${SAVED_NAME}"`
    filelist=(${filelist//${INPDIR}\//})

    # Make subdir for files stored in sub-folders 

    if [[ ${TMP_NAME: -1} == '/' && ${#filelist[@]} -ge 1 ]]; then
        mkdir -p "${JOBTMPDIR}/${TMP_NAME}"
    fi
    for file in ${filelist[@]}; do
        
        # Make sure the file is not empty

        if [[ ! -s ${INPDIR}/${file} ]]; then
            continue
        fi

        # If TMP_NAME has '*', keep the original name

        if [[ ${TMP_NAME} == *'*'* ]]; then
            TMP_NAME=${file}
        fi

        # Find files in INPDIR and  copy them to JOBTMPDIR

        echo "Find input data: ${INPDIR}/${file}" 2>&1 | tee -a ${OUTDIR}/${OUTPUT}

        # Cover the duplicate file. 
        ## Fix CRYSTRAL d12/d3: JOBFILE takes priority
        if [[ ${file} == ${JOBFILE##*/} ]]; then
            is_jobfile=true
        else
            is_jobfile=false
        fi

        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            if [[ ${is_jobfile} != true ]]; then
                continue
            fi
            echo "Warning! Duplicate file detected in temporary directory: ${JOBTMPDIR}/${TMP_NAME}." 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
            echo "  The file will be covered by the new entry ${INPDIR}/${file}." 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        fi
        cp -r ${INPDIR}/${file} ${JOBTMPDIR}/${TMP_NAME}
        echo "Input ${file} copied."
    done

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`echo $(awk 'NR=="'${LINE_PRECALC}'"{printf("%s", substr($0,1,21))}' ${SETFILE})`
    TMP_NAME=`echo $(awk 'NR=="'${LINE_PRECALC}'"{printf("%s", substr($0,22,21))}' ${SETFILE})`
done

# Read external file list - Same as REFNAME (Table REF_FILE)

LINE_REF=`grep -nw 'REF_FILE' ${SETFILE}`
LINE_REF=`echo "scale=0;${LINE_REF%%:*}+4" | bc`

SAVED_NAME=`echo $(awk 'NR=="'${LINE_REF}'"{printf("%s", substr($0,1,21))}' ${SETFILE})`
TMP_NAME=`echo $(awk 'NR=="'${LINE_REF}'"{printf("%s", substr($0,22,21))}' ${SETFILE})`

while [[ ${TMP_NAME} != '---------'* && ${move_file} == true && ${REFNAME} != 'no' ]]; do

    # Substitute variable flags for saved name in INPDIR

    SAVED_NAME=`echo ${SAVED_NAME} | sed "s/\[ref.*\]/${REFNAME}/g"`

    # Substitute variable flags for temporary name in JOBTMPDIR

    TMP_NAME=`echo ${TMP_NAME} | sed "s/\[job.*\]/${JOBNAME}/g"`
    TMP_NAME=`echo ${TMP_NAME} | sed "s/\[ref.*\]/${REFNAME}/g"`

    # List files, to get all matched files in 'SAVED_NAME' settings

    filelist=`find ${INPDIR} -name "${SAVED_NAME}"`
    filelist=(${filelist//${INPDIR}\//})

    # Make subdir for files stored in sub-folders 

    if [[ ${TMP_NAME: -1} == '/' && ${#filelist[@]} -ge 1 ]]; then
        mkdir -p "${JOBTMPDIR}/${TMP_NAME}"
    fi
    for file in ${filelist[@]}; do
        
        # Make sure the file is not empty

        if [[ ! -s ${INPDIR}/${file} ]]; then
            continue
        fi

        # If TMP_NAME has '*', keep the original name

        if [[ ${TMP_NAME} == *'*'* ]]; then
            TMP_NAME=${file}
        fi

        # Find files in INPDIR and  copy them to JOBTMPDIR

        echo "Find input reference: ${INPDIR}/${file}" 2>&1 | tee -a ${OUTDIR}/${OUTPUT}

        # Do not cover the duplicate file. 

        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            echo "Warning! Duplicate file detected in temporary directory: ${JOBTMPDIR}/${TMP_NAME}." 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
            echo "  The new reference entry ${INPDIR}/${file} is ignored." 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
            continue
        fi
        cp -r ${INPDIR}/${file} ${JOBTMPDIR}/${TMP_NAME}
        echo "Input ${file} copied."
    done

    LINE_REF=`echo "scale=0;${LINE_REF}+1" | bc`
    SAVED_NAME=`echo $(awk 'NR=="'${LINE_REF}'"{printf("%s", substr($0,1,21))}' ${SETFILE})`
    TMP_NAME=`echo $(awk 'NR=="'${LINE_REF}'"{printf("%s", substr($0,22,21))}' ${SETFILE})`
done

echo "All files are synchonised." | tee -a ${OUTDIR}/${OUTPUT}

# Launch calculations
cat << EOF | tee -a ${OUTDIR}/${OUTPUT}

Job Ready to Go
-------------------------------------------
  Job name       : ${JOBNAME}
  ID             : ${SLURM_JOB_ID}
  Command        : ${EXECOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1
  Temporary dir  : ${JOBTMPDIR}
  List of files  : $(ls -l ${JOBTMPDIR} 2>&1)
  Input script   :
$(cat ${JOBFILE})
-------------------------------------------

EOF
cd ${JOBTMPDIR}
echo "Entering temporary directory..."
echo "Launching the job..."

echo "${EXECOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1" | bash

