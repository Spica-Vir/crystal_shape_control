#!/bin/bash

# Basic input format
# gen_sub -set setfile -x jobtype -in input -ref refname -nd ND -wt WT -- 
# setfile : str, path to the settings file
# jobtype : str, pcrys / mppcrys / scrys / pprop /sprop
# ND      : int, number of nodes
# WT      : str, walltime in hh:mm
# jobname : str, input .d12 or .d3 file
# refname : str, optional, name of the previous run
# The sequence of input parameters can be changed.

# get inputs in command line style

function get_input_ {

    # List of flags: -set, -x, -nd, -wt, -in, -ref, -name, -help

    param_list=$(getopt -a -l help,x:,set:,nd:,wt:,in:,ref:,name: -n "$0" -- ${in_var} 2> /dev/null) 
    cat << EOF
    INPUT parameters:
        ${param_list}

EOF

    eval set -- "${param_list}"
    while [[ true ]]; do
        case $1 in
        --help )
            print_HOWTO_; exit ;;
        --set )
            shift; SETFILE=$1 ;;
        --x ) 
            shift; EXELABEL+=($1) ;;
        --in ) 
            shift; INFILE+=($1) ;;
        --ref ) 
            shift; REFNAME+=($1) ;;
        --nd ) 
            shift; ND=$1 ;;
        --wt ) 
            shift; WT+=($1) ;;
        --name )
            shift; TMPJOBNAME=$1 ;;
        -- ) 
            break ;;
        * ) 
            cat << EOF
    ERROR: 
        Format error in input list.

EOF
            print_HOWTO_
            exit ;;
        esac
        shift
    done
    INPDIR=$(realpath ${INFILE[0]})
    INPDIR=${INPDIR%/*}
    check_SETFILE_
    check_EXELABEL_
    check_INFILE_
    if [[ ! -z ${REFNAME} ]]; then
        check_REFNAME_
    else
	    for ((i=0; i<${#EXELABEL[@]}; i++)); do
		    REFNAME+=('no')
		done
    fi
    check_ND_
    check_WT_
    if [[ ${#EXELABEL[@]} -gt 1 ]]; then
        set_multijob_name_
    fi

    cat << EOF
Formatted INPUT parameters:
-----------------------------------------
    Number of nodes     = ${ND}
    Executable label(s) = ${EXELABEL[@]}
    Input file(s)       = ${INFILE[@]}
    Walltime            = ${WT[@]}
    Reference job(s)    = ${REFNAME[@]}
    Settings            = ${SETFILE}
-----------------------------------------

EOF
}

# Check settings file

function check_SETFILE_ {
    if [[ ! -e ${SETFILE} || ! -s ${SETFILE} ]]; then
        cat << EOF
    ERROR:
        File 'settings' not found.

        Specified directory : ${SETFILE}

EOF
        print_HOWTO_SETFILE_
        exit
    fi
}

# Instruction for -- setfile

function print_HOWTO_SETFILE_ {
    cat << EOF
    -------------------------------------------
    -set flag

    Set the path to the 'settings' file, mandatory.

EOF
}

# Get label of command from input and find corresponding command

function check_EXELABEL_ {
    
    # No -x input

    if [[ -z ${EXELABEL} ]]; then
        cat << EOF
    ERROR:
        Executable label must be specified by '-x' flag.

EOF
        print_HOWTO_EXELABEL_
        exit
    fi

    # Executable label not found

    for exe in ${EXELABEL[@]}; do
        line_exe=`grep -nw 'EXE_TABLE' ${SETFILE}`
        line_exe=`echo "scale=0;${line_exe%%:*}+4" | bc`
        avail_exe=`echo $(awk 'NR=="'${line_exe}'"{printf("%s", substr($0,1,11))}' ${SETFILE})`
        found_exe=false
        while [[ ${avail_exe} != '---------'* ]]; do
            echo ${exe} | grep -i ${avail_exe} > /dev/null 2>&1
            if [[ $? -eq 0 ]]; then
                found_exe=true
                MPICOMMAND+=("`echo $(awk 'NR=="'${line_exe}'"{printf("%s", substr($0,12,61))}' ${SETFILE})`")
                COMMAND+=("`echo $(awk 'NR=="'${line_exe}'"{printf("%s", substr($0,73,61))}' ${SETFILE})`")
                break
            fi
            line_exe=`echo "scale=0;${line_exe}+1" | bc`
            avail_exe=`echo $(awk 'NR=="'${line_exe}'"{printf("%s", substr($0,1,11))}' ${SETFILE})`
        done
        if [[ ${found_exe} != true ]]; then
            cat << EOF
    ERROR:
        Label not found. Check 'EXE_TABLE' of ${SETFILE}.

        Executable label : ${exe}

EOF
            exit
        fi
    done
}

# Instruction for executable label

function print_HOWTO_EXELABEL_ {
    cat << EOF
    -------------------------------------------
    -x flag

    Label of executable + in-line option, case insensitive.
    Defined in the 'EXE_TABLE' of ${SETFILE}. 

EOF
}

# Check input file, jobname.<ext>

function check_INFILE_ {

    # No -in input / number of -in not consistent with number of -x

    if [[ -z ${INFILE} || ${#INFILE[@]} -ne ${#EXELABEL[@]} ]]; then
                cat << EOF
    ERROR:
        Input files must be specified by '-in' flag and consistent
        with executable labels specified by '-x' flag.

EOF
        print_HOWTO_INFILE_
        exit
    fi

    for (( i = 0; i < ${#INFILE[@]}; i++ )); do

        # Specified input not found / empty

        file=${INFILE[${i}]}
        file=${INPDIR}/${file##*/}
        if [[ ! -e ${file} || ! -s ${file} ]]; then
            cat << EOF
    ERROR:
        Input file does not exit / is empty. 

        Supposed input : ${file}

EOF
            exit
        fi

        # output exists

        output=${file%.*}.out
        if [[ -e ${output} && -s ${output} ]]; then
            cat << EOF
    ERROR:
        Output file exists. Move it to a safe place or remove it. 

        Output : ${output}

EOF
            exit
        fi
        echo "Calculation output will be found in ${output}"
    done

    # set jobname if only one input is generated

    if [[ ${#INFILE[@]} -eq 1 ]]; then
        JOBNAME=${INFILE[0]%.*}
        JOBNAME=${JOBNAME##*/}
        echo "Name of the single job qsub file : ${JOBNAME}.qsub"
    fi
}

# Instruction for input file

function print_HOWTO_INFILE_ {
    cat << EOF
    -------------------------------------------
    -in flag

    Basename of the input file, with extension. 

    NOTE: The number of -in flags should be
    consistent with number of -x flags

EOF
}

# Check reference file name

function check_REFNAME_ {

    # If '-ref' flag is set, check whether it is consistent with '-x'

    if [[ ${#REFNAME[@]} != ${#EXELABEL[@]} ]]; then
        cat << EOF
    ERROR: 
        The length of '-ref' flag should be either 0 or consistent
        with the length of '-x' flag.

EOF
        print_HOWTO_REFNAME_
        exit
    fi

    # Wheter the file(s) with string ${REFNAME} exist

    for (( i = 0; i < ${#REFNAME[@]}; i++ )); do
        ref=${REFNAME[$i]}
        if [[ ${ref} == 'no' ]]; then
            continue
        else
            if [[ -z $(find ${INPDIR} -maxdepth 1 -name "*${ref}*") ]]; then
                cat << EOF
   ERROR:
        ${ref}* not found in ${INPDIR}/ and its 1st level sub-directories.

        Refname -ref  : ${ref}

EOF
                exit
            fi
        fi
    done
}

# Instruction for REFNAME

function print_HOWTO_REFNAME_ {
    cat << EOF
    -------------------------------------------
    -ref flag

    Basename of reference file(s), no extension. 

    NOTES: 

    1. The number of -ref flag should be either
    0 or consistent with number of -x flag

    2. 'no' is a reserved keyword for empty
    reference input.

EOF
}

# Check number of nodes

function check_ND_ {

    # No -nd input

    if [[ -z ${ND} || ${ND} -eq 0 ]]; then
        cat << EOF
    WARNING:
        Reasonable number of nodes MUST BE specified. 
        Set to default value ND=1.

EOF
        ND=1
    fi

    CHECK_IF_ND_IS_AN_INTEGER=`echo $ND | awk 'BEGIN{S="YES"};{
        L=length($1);
        for(i=1;i<=L;i++){
            if(substr($1,i,1) !~  /[0-9]/ ){
                S="NO";
                exit
            }
        }};END{print S}'`

    if [[ ${CHECK_IF_ND_IS_AN_INTEGER} == "NO" ]]; then
        cat << EOF
    ERROR:
        Number of nodes has to be an integer. 
        Check the value: ${ND}

EOF
        print_HOWTO_ND_
        exit
    fi
}

# Instruction for ND

function print_HOWTO_ND_ {
    cat << EOF
    -------------------------------------------
    -nd flag

    The number of nodes, an integer.

EOF
}

# Check walltime

function check_WT_ {

    # Whether '-wt' is set and consistent with '-x'

    if [[ -z ${WT} || ${#WT[@]} -ne ${#EXELABEL[@]} ]]; then
        cat << EOF
    ERROR:
       Walltime '-wt' needs to be set and consistent with '-x' flags.

EOF
        print_HOWTO_WT_
        exit
    fi

    # Check walltime format

    for (( i = 0; i < ${#WT[@]}; i++ )); do
        separator=`echo ${WT} | grep ':'`
        if [[ -z ${separator} ]]; then
            cat << EOF
    WARNING:
        Separator not specified, any number will be regarded as minutes.

EOF
            hh=`printf "%02d\n" $(echo "scale=0; ${WT}%60" | bc)`
            mm=`printf "%02d\n" $(echo "scale=0; ${WT}-${hh}*60" | bc)`
            WT=`echo "${hh}:${mm}"`
        fi

        CHECK_IF_WT_HAS_A_hhmm_FORMAT=`echo ${WT} | awk 'BEGIN{S="YES"};{
            c=length($1)-match($1,":");
            if(c!=2){S="NO";exit}};{
            gsub(":","",$1);
            L=length($1);
            for(i=1;i<=L;i++){
                if(substr($1,i,1) !~  /[0-9]/ ){
                    S="NO";
                    exit
                }
            }};END{print S}'`

        if [[ ${CHECK_IF_WT_HAS_A_hhmm_FORMAT} == "NO" ]]; then
            cat << EOF
    ERROR:
        Format of '-wt' flag is hh:mm 
            
        Walltime : ${WT}

EOF
            exit
        fi
    done
}

# Instruction for WT

function print_HOWTO_WT_ {
    cat << EOF
    -------------------------------------------
    -wt flag

    Set walltime in 'hh:mm' format.

    Note: The number of -wt flags should be
    consistent with number of -x flags

EOF
}

# Set a universial name for multiple jobs

function set_multijob_name_ {
    if [[ -z ${TMPJOBNAME} ]]; then
        JOBNAME=${INFILE[0]%.*}_et_al
        JOBNAME=${JOBNAME##*/}
    else
        JOBNAME=${TMPJOBNAME}
    fi
    echo "Name of the multi-job qsub file : ${JOBNAME}.qsub"
}

# Instruction for -name flag

function print_HOWTO_NAME_ {
    cat << EOF
    -------------------------------------------
    -name flag

    Set a common name for multiple jobs. If not
    set and multiple -x flags are detected, the
    common name is set to 'job1_et_al'.

EOF
}

# General instruction

function print_HOWTO_ {
    cat << EOF
    -------------------------------------------
    Imperial HPC job submitter HOWTO - ADVANCED
    -------------------------------------------
    Use '-help' flag to get instructions.

    Qsub generation script

        $(dirname $0)/gen_sub

    Available flags

        -set -x  -in  -ref  -nd  -wt  -name  -help
        The sequence of input parameters is flexible

    Multiple input example code

        $(dirname $0)/gen_sub -name mgo_band -set ~/etc/runCRYSTAL17/settings -nd 4 -x Pcrys -in mgo.d12 -ref no -wt 02:00 -x Pprop -in mgo.d3 -ref mgo -wt 00:30

    Typically an alias is defined beginning with 'X', which does not require -set flag. For example:

        Xcrys17 -name mgo_band -nd 4 -x Pcrys -in mgo.d12 -ref no -wt 02:00 -x Pprop -in mgo.d3 -ref mgo -wt 00:30

    This command generates a single 'mgo_band.qsub' file which 
    sequentially run parallel crystal calculation by 'mgo.d12' 
    without reference and a parallel properties calculation by 'mgo.d3'
    with 'mgo' SCF calculation as reference. The walltime for 'mgo.d12'
    is 2 hours and for 'mgo.d3' is 30 minutes.

EOF
    
    print_HOWTO_NAME_
    print_HOWTO_SETFILE_
    print_HOWTO_ND_
    print_HOWTO_EXELABEL_
    print_HOWTO_INFILE_
    print_HOWTO_REFNAME_
    print_HOWTO_WT_
}

# generate submission file

function generate_subfile_ {
    check_scripts_
    check_executable_
    get_subtemplate_
    get_subinfo_
    cat << EOF > ${JOBNAME}.${SUB_EXT}
${TEMPT}
EOF
    
    # Calculate the timeout for calculations and calculate total walltime
    tthr=0
    ttmn=0
    for (( i = 0; i < ${#WT[@]}; i++ )); do
        time=${WT[$i]}
        thr=${time%:*}
        tthr=`echo "scale=0;${thr}+${tthr}" | bc`
        tmn=${time#*:}
        ttmn=`echo "scale=0;${tmn}+${ttmn}" | bc`
        tot=`echo "scale=0;${thr}*60+${tmn}-${TOUT_PER_JOB}" | bc`
        TOUT+=("${tot}m")
    done
    TWT=`echo "$(printf "%02d\n" ${tthr}):$(printf "%02d\n" ${ttmn}):00"`

    # Substitute SLURM setup variables in template 

    sed -i "s|\${V_JOBNAME}|${JOBNAME}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_ND}|${ND}|g" ${JOBNAME}.${SUB_EXT}
    # sed -i "s|\${V_NCPU}|${NCPU}|g" ${JOBNAME}.${SUB_EXT}
    # sed -i "s|\${V_MEM}|${MEM}GB|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_PROC}|${PROC}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_TRED}|${TRED}|g" ${JOBNAME}.${SUB_EXT}
    # sed -i "s|\${V_NGPU}|${NGPU}|g" ${JOBNAME}.${SUB_EXT}
    # sed -i "s|\${V_TGPU}|${TGPU}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_TWT}|${TWT}|g" ${JOBNAME}.${SUB_EXT}
    # sed -i "s|\${V_TPROC}|${TPROC}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_BUDGET}|${BUDGET}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_QOS}|${QOS}|g" ${JOBNAME}.${SUB_EXT}
    sed -i "s|\${V_PARTITION}|${PARTITION}|g" ${JOBNAME}.${SUB_EXT}

    ############## Command template ################
    # timeout ${TOUT} ${SCRIPTDIR}/${SCRIPT} -set ${SETFILE} -in ${INFILE} -ref ${REFNAME} -- ${MPICOMMAND} ${COMMAND} 
    # ${SCRIPTDIR}/${POSCRIPT} -in ${INFILE} -set ${SETFILE}
    #
    # if [[ -f ./${JOBNAME}.run ]];then
    # chmod 755 ./${JOBNAME}.run
    # ./${JOBNAME}.run
    # fi
    ################################################

    # Generate job executation and post processing commands

    for (( i = 0; i < ${#INFILE[@]}; i++ )); do
        echo "timeout ${TOUT[$i]} ${SCRIPTDIR}/${SCRIPT} -set ${SETFILE} -in ${INFILE[$i]} -ref ${REFNAME[$i]} -- '${MPICOMMAND[$i]} ${COMMAND[$i]}'" >> ${JOBNAME}.${SUB_EXT}
        echo "${SCRIPTDIR}/${POSCRIPT} -in ${INFILE[$i]} -set ${SETFILE}" >> ${JOBNAME}.${SUB_EXT}
        echo -e "\n" >> ${JOBNAME}.${SUB_EXT}
    done
}

# check job execution scripts

function check_scripts_ {
    ls ${SCRIPTDIR}/${SCRIPT} > /dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        cat << EOF
    ERROR:
        Job execution script not found.

        Path          : ${SCRIPTDIR}/${SCRIPT}
        Settings file : ${SETFILE}

EOF
        exit
    fi

    ls ${SCRIPTDIR}/${POSCRIPT} > /dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        cat << EOF
    ERROR:
        Post processing script not found.

        Path          : ${SCRIPTDIR}/${SCRIPT}
        Settings file : ${SETFILE}

EOF
        exit
    fi
}

# check executables

function check_executable_ {
    XDIR=`echo $(grep -w -A 1 'EXEDIR' ${SETFILE} | tail -1)`
    for (( i = 0; i < ${#COMMAND[@]}; i++ )); do
        cmd=${COMMAND[$i]}

        # command existance

        if [[ ${XDIR} == *'module load'* ]]; then
            ${XDIR} > /dev/null 2>&1
            which ${cmd%% *} > /dev/null 2>&1
            if [[ $? -ne 0 ]]; then
                cat << EOF
    ERROR:
        Simulation executable not found.

        Command    : ${cmd}
        Executable : ${cmd%% *}
        Module     : ${XDIR}

EOF
                exit
            fi
        else
            ls ${XDIR}/${cmd%% *} > /dev/null 2>&1 
            if [[ $? -ne 0 ]]; then
                cat << EOF
    ERROR:
        Simulation command not found.

        Command    : ${cmd}
        Executable : ${cmd%% *}
        Directory  : ${XDIR}

EOF
                exit
            fi
        fi
		
        # substitute jobname

		COMMAND[$i]=`echo "${XDIR}/${cmd}" | sed "s/\[job.*\]/${JOBNAME[$i]}/g"`

    done
}

# get necessary information from settings file

function get_subinfo_ {

    # Job executation script

    SCRIPT='run_exec'
    
    # Post processing script
    
    POSCRIPT='post_proc'
    
    # extension for submission file
    
    SUB_EXT=`echo $(grep -w -A 1 'SUBMISSION_EXT' ${SETFILE} | tail -1)`
    SUB_EXT=${SUB_EXT#*.}
    
    # processors per node
    
    NCPU=`echo $(grep -w -A 1 'NCPU_PER_NODE' ${SETFILE} | tail -1)`

    # memory per node

    # MEM=`echo $(grep -w -A 1 'MEM_PER_NODE' ${SETFILE} | tail -1)`
    # MEM=${MEM%G*}
    # MEM=${MEM%g*}

    # threads per process

    TRED=`echo $(grep -w -A 1 'NTHREAD_PER_PROC' ${SETFILE} | tail -1)`
    
    # processes per node = NCPU/TRED, multi-threading in 1 CPU is not allowed.
    
    PROC=`echo "scale=0;${NCPU}/${TRED}" | bc`

    # total number of processes = PROC*ND

    # TPROC=`echo "scale=0;${ND}*${NCPU}/${TRED}" | bc`
    
    # number of GPUs per node
    
    # NGPU=`echo $(grep -w -A 1 'NGPU_PER_NODE' ${SETFILE} | tail -1)`
    # if [[ ${NGPU} -eq 0 ]]; then
    #     NGPU=""
    #     TGPU=""
    # else
    #     NGPU=`echo ":ngpus=${NGPU}"`

    # # type of GPUs per node

    #     TGPU=`echo $(grep -w -A 1 'GPU_TYPE' ${SETFILE} | tail -1)`
    #     TGPU=`echo ":gpu_type=${TGPU}"`
    # fi

    # Time spared for post processing

    TOUT_PER_JOB=`echo $(grep -w -A 1 'TIME_OUT' ${SETFILE} | tail -1)`

	# Budget code

	BUDGET=`echo $(grep -w -A 1 'BUDGET_CODE' ${SETFILE} | tail -1)`

	# QOS

	QOS=`echo $(grep -w -A 1 'QOS' ${SETFILE} | tail -1)`

	# Partition of service

	PARTITION=`echo $(grep -w -A 1 'PARTITION' ${SETFILE} | tail -1)`
}

# get submission file template and necessary information

function get_subtemplate_ {

    # template file

    BG_TEMP=`grep -nw 'JOB_SUBMISSION_TEMPLATE' ${SETFILE}`
    BG_TEMP=`echo "scale=0;${BG_TEMP%%:*}+2" | bc`

    line_endflag=${BG_TEMP}
    endflag=`awk NR==${line_endflag}'{print}' ${SETFILE}`

    while [[ ${endflag} != '------------'* ]]; do
        line_endflag=`echo "scale=0;${line_endflag}+1" | bc`
        endflag=`awk NR==${line_endflag}'{print}' ${SETFILE}`
    done

    ED_TEMP=`echo "scale=0;${line_endflag}-1" | bc`
    TEMPT=`sed -n "${BG_TEMP},${ED_TEMP}p" ${SETFILE}`
}

# Main I/O function
in_var="header "$@""
SCRIPTDIR=`dirname $0`

get_input_
generate_subfile_

cat << EOF
File ${JOBNAME}.${SUB_EXT} has been generated.

Job information:
----------------------------------------------------------------
    PBS qsub file                 = ${JOBNAME}.${SUB_EXT}
    Job submission script         = ${SCRIPTDIR}${SCRIPT}
    Post processing script        = ${SCRIPTDIR}${POSCRIPT}
    Settings script               = ${SETFILE}
    Number of nodes               = ${ND}
    Commands                      = ${COMMAND[@]}
    Input directory               = ${INPDIR}
    Input file(s)                 = ${INFILE[@]}
    Readl running walltime        = ${TOUT[@]}
    Reference job(s)              = ${REFNAME[@]}
----------------------------------------------------------------
EOF

exit
