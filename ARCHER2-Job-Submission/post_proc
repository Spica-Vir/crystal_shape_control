#!/bin/bash

# get inputs in command line style

function get_input_ {

    # Useful variables: 
    # SETFILE: Path to 'settings' file
    # JOBNAME: Input file name without extension

    param_list=$(getopt -a -l set:,in: -n "$0" -- ${in_var} 2> /dev/null) 
    eval set -- "${param_list}"
    echo "Parameter list: ${param_list}"
    while [[ true ]]; do
        case $1 in
        --in ) 
            shift; JOBFILE=$1; JOBNAME=${JOBFILE%.*}; JOBNAME=${JOBNAME##*/}  ;;
        --set )
            shift; SETFILE=$1 ;;
        -- ) 
            break;;
        * ) 
            echo "Error: Input not recognized. Refer to the manual. ";
            echo "Job terminated without calculation. ";
            exit;;
        esac
        shift
    done
}

# Restore variables - kept same as job submission script
in_var="header "$@""
get_input_
OUTDIR=$(realpath ${JOBFILE})
OUTDIR=${OUTDIR%/*}
OUTPUT=${JOBNAME}.out
INPDIR=${OUTDIR}
JOBTMPDIR=`echo $(grep -w -A 1 'JOB_TMPDIR' ${SETFILE} | tail -1)`
if [[ -z ${JOBTMPDIR} || ${JOBTMPDIR} == 'default' ]]; then # As subdirectory under the current one
    JOBTMPDIR=$(dirname ${JOBFILE})/${JOBNAME}_${SLURM_JOB_ID}
    JOBTMPDIR=`realpath ${JOBTMPDIR}`
    move_file=true
elif [[ ${JOBTMPDIR} == 'nodir' ]]; then # In current directory
    JOBTMPDIR=$(dirname ${JOBFILE})
    JOBTMPDIR=`realpath ${JOBTMPDIR}`
    move_file=false
else # In a separate directory
    JOBTMPDIR=${JOBTMPDIR}/${JOBNAME}_${SLURM_JOB_ID}
    JOBTMPDIR=`realpath ${JOBTMPDIR}`
    move_file=true
fi

# Create temporary copy of the script for execution

POSTSCRIPT="Post_script_${SLURM_JOB_ID}"
sed '1,/^#tag_copy/d' $0 > ${JOBTMPDIR}/${POSTSCRIPT}

# Start post-processing
cat << EOF | tee -a ${OUTDIR}/${OUTPUT}
Post Processing Report
--------------------------------------------
Begining of post processing : $(date)
List of saved files
  TEMPORARY            SAVED
EOF

source ${JOBTMPDIR}/${POSTSCRIPT}

cat << EOF | tee -a ${OUTDIR}/${OUTPUT}
End of post processing : $(date)
Script post_proc done.
--------------------------------------------
EOF
exit

# Copied content: Between #tag_start_copy and #tag_end_copy are copied in temporary directory
#tag_copy
cd ${JOBTMPDIR}

# Read POST_CALC list

LINE_POSTCALC=`grep -nw 'POST_CALC' ${SETFILE}`
LINE_POSTCALC=`echo "scale=0;${LINE_POSTCALC%%:*}+4" | bc`

# Read table, substitute variable flags and spaces for saved name in JOBTMPDIR

SAVED_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", substr($0,1,21))}' ${SETFILE} | sed "s/\[job.*\]/${JOBNAME}/g" | sed "s/\s//g"`

# Read table, substitute variable flags and spaces for temporary name in JOBTMPDIR

TMP_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", substr($0,22,21))}' ${SETFILE} | sed "s/\[job.*\]/${JOBNAME}/g" | sed "s/\s//g"`

while [[ ${TMP_NAME} != '---------'* && ${move_file} == true ]]; do

    # List files, to get all matched files in 'TMP_NAME' settings

    if [[ ${TMP_NAME: -1} == '/' ]]; then
        ls ${TMP_NAME} > /dev/null 2>&1
        if [[ $? -eq 0 ]]; then
            filelist=($(ls ${TMP_NAME}))
            for ((i=0; i<${#filelist[@]}; i++)); do
                filelist[$i]=`echo "${TMP_NAME}${filelist[$i]}"`
            done
        else
            filelist=()
        fi
    else
        filelist=`find ${JOBTMPDIR} -name "${TMP_NAME}"`
        filelist=(${filelist//${JOBTMPDIR}\//})
    fi

    # Make subdir for files stored in sub-folders 

    if [[ ${SAVED_NAME: -1} == '/' && ${#filelist[@]} -ge 1 ]]; then
        mkdir -p "${OUTDIR}/${SAVED_NAME}"
    fi
    for file in ${filelist[@]}; do

        # Make sure the file is not empty

        if [[ ! -s ${JOBTMPDIR}/${file} ]]; then
            continue
        fi

        SAVED_NAME_REAL=${SAVED_NAME}

        # If SAVED_NAME is '*', keep the original name

        if [[ ${SAVED_NAME} == *'*'* ]]; then
            SAVED_NAME_REAL=${file##*/}
        fi

        # If SAVED_NAME ends with '/', update it

        if [[  ${SAVED_NAME: -1} == '/' ]]; then
            SAVED_NAME_REAL=`echo "${SAVED_NAME}${file##*/}"`
        fi

        # Copy files - cover the old ones

        if [[ -e ${OUTDIR}/${SAVED_NAME_REAL} && -s ${OUTDIR}/${SAVED_NAME_REAL} ]]; then
            echo "Warning! Duplicate file detected in out directory: ${OUTDIR}/${SAVED_NAME_REAL}." 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
            echo "  The file will be covered by the new entry ${JOBTMPDIR}/${file}." 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        fi
        echo "${file} ${SAVED_NAME_REAL}" | awk '{printf("  %-21s%-52s"),$1,$2}' 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        ls -l ${file} | awk '{printf("  %-8s %s %s %s\n"),$5,$6,$7,$8}' 2>&1 | tee -a ${OUTDIR}/${OUTPUT}
        cp -r ${JOBTMPDIR}/${file} ${OUTDIR}/${SAVED_NAME_REAL}
    done

    LINE_POSTCALC=`echo "scale=0;${LINE_POSTCALC%%:*}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", substr($0,1,21))}' ${SETFILE} | sed "s/\[job.*\]/${JOBNAME}/g" | sed "s/\s//g"`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCALC}'"{printf("%s", substr($0,22,21))}' ${SETFILE} | sed "s/\[job.*\]/${JOBNAME}/g" | sed "s/\s//g"`
done

# Calculation summary

cat << EOF | tee -a ${OUTDIR}/${OUTPUT}
--------------------------------------------

Temporary Directory Disk Info
--------------------------------------------
  Temporary directory      : ${JOBTMPDIR}

  Disk usage (df -h)
$(df -h ${JOBTMPDIR} 2>&1)

  Usage by folders (du -m)
$(du -m ${JOBTMPDIR} 2>&1)

  Detailed file list (ls -l .)
    see ${OUTDIR}/${JOBNAME}.log file
EOF
cat << EOF
$(ls -l . 2>&1)
EOF
cat << EOF | tee -a ${OUTDIR}/${OUTPUT}
--------------------------------------------

EOF

# Remove temporary directory

cd ${OUTDIR}
if [[ ${move_file} == true ]]; then
    rm -fr ${JOBTMPDIR}
else
    rm Job_script_${SLURM_JOB_ID} Post_script_${SLURM_JOB_ID}
fi

mv slurm-${SLURM_JOB_ID}.out ${JOBNAME}.log
